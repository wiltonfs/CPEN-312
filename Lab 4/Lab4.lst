                 -1   $MODDE0CV ; Special Function Registers declaration for CV-8052
0000              1   ;  MODDDE2: Register definition for DE2-8052 softcore
0000              2   ;
0000              3   ;   Copyright (C) 2011  Jesus Calvino-Fraga, jesusc at ece.ubc.ca
0000              4   ;
0000              5   ;   This library is free software; you can redistribute it and/or
0000              6   ;   modify it under the terms of the GNU Lesser General Public
0000              7   ;   License as published by the Free Software Foundation; either
0000              8   ;   version 2.1 of the License, or (at your option) any later version.
0000              9   ;
0000             10   ;   This library is distributed in the hope that it will be useful,
0000             11   ;   but WITHOUT ANY WARRANTY; without even the implied warranty of
0000             12   ;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
0000             13   ;   Lesser General Public License for more details.
0000             14   ;
0000             15   ;   You should have received a copy of the GNU Lesser General Public
0000             16   ;   License along with this library; if not, write to the Free Software
0000             17   ;   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
0000             18   ;
0000             19       
0000             20   P0     DATA  080H  ;PORT 0
0000             21   SP     DATA  081H  ;STACK POINTER
0000             22   DPL    DATA  082H  ;DATA POINTER 0 - LOW BYTE
0000             23   DPH    DATA  083H  ;DATA POINTER 0 - HIGH BYTE
0000             24   DPL1   DATA  084H  ;DATA POINTER 1 - LOW BYTE
0000             25   DPH1   DATA  085H  ;DATA POINTER 1 - HIGH BYTE
0000             26   DPS    DATA  086H  ;DATA POINTER SELECT. DPH1, DPL1 active when DPS.0=1
0000             27   PCON   DATA  087H  ;POWER CONTROL
0000             28   TCON   DATA  088H  ;TIMER CONTROL
0000             29   TMOD   DATA  089H  ;TIMER MODE
0000             30   TL0    DATA  08AH  ;TIMER 0 - LOW BYTE
0000             31   TL1    DATA  08BH  ;TIMER 1 - LOW BYTE
0000             32   TH0    DATA  08CH  ;TIMER 0 - HIGH BYTE
0000             33   TH1    DATA  08DH  ;TIMER 1 - HIGH BYTE
0000             34   P1     DATA  090H  ;PORT 1
0000             35   SCON   DATA  098H  ;SERIAL PORT CONTROL
0000             36   SBUF   DATA  099H  ;SERIAL PORT BUFFER
0000             37   P2     DATA  0A0H  ;PORT 2
0000             38   IE     DATA  0A8H  ;INTERRUPT ENABLE
0000             39   P3     DATA  0B0H  ;PORT 3
0000             40   IP     DATA  0B8H  ;INTERRUPT PRIORITY
0000             41   T2CON  DATA  0C8H  ;TIMER 2 CONTROL
0000             42   T2MOD  DATA  0C9H  ;TIMER 2 MODE
0000             43   RCAP2L DATA  0CAH  ;TIMER 2 CAPTURE REGISTER - LOW BYTE
0000             44   RCAP2H DATA  0CBH  ;TIMER 2 CAPTURE REGISTER - HIGH BYTE
0000             45   TL2    DATA  0CCH  ;TIMER 2 - LOW BYTE
0000             46   TH2    DATA  0CDH  ;TIMER 2 - HIGH BYTE
0000             47   PSW    DATA  0D0H  ;PROGRAM STATUS WORD
0000             48   ACC    DATA  0E0H  ;ACCUMULATOR
0000             49   B      DATA  0F0H  ;MULTIPLICATION REGISTER
0000             50   IT0    BIT   088H  ;TCON.0 - EXT. INTERRUPT 0 TYPE
0000             51   IE0    BIT   089H  ;TCON.1 - EXT. INTERRUPT 0 EDGE FLAG
0000             52   IT1    BIT   08AH  ;TCON.2 - EXT. INTERRUPT 1 TYPE
0000             53   IE1    BIT   08BH  ;TCON.3 - EXT. INTERRUPT 1 EDGE FLAG
0000             54   TR0    BIT   08CH  ;TCON.4 - TIMER 0 ON/OFF CONTROL
0000             55   TF0    BIT   08DH  ;TCON.5 - TIMER 0 OVERFLOW FLAG
0000             56   TR1    BIT   08EH  ;TCON.6 - TIMER 1 ON/OFF CONTROL
0000             57   TF1    BIT   08FH  ;TCON.7 - TIMER 1 OVERFLOW FLAG
0000             58   RI     BIT   098H  ;SCON.0 - RECEIVE INTERRUPT FLAG
0000             59   TI     BIT   099H  ;SCON.1 - TRANSMIT INTERRUPT FLAG
0000             60   RB8    BIT   09AH  ;SCON.2 - RECEIVE BIT 8
0000             61   TB8    BIT   09BH  ;SCON.3 - TRANSMIT BIT 8
0000             62   REN    BIT   09CH  ;SCON.4 - RECEIVE ENABLE
0000             63   SM2    BIT   09DH  ;SCON.5 - SERIAL MODE CONTROL BIT 2
0000             64   SM1    BIT   09EH  ;SCON.6 - SERIAL MODE CONTROL BIT 1
0000             65   SM0    BIT   09FH  ;SCON.7 - SERIAL MODE CONTROL BIT 0
0000             66   EX0    BIT   0A8H  ;IE.0 - EXTERNAL INTERRUPT 0 ENABLE
0000             67   ET0    BIT   0A9H  ;IE.1 - TIMER 0 INTERRUPT ENABLE
0000             68   EX1    BIT   0AAH  ;IE.2 - EXTERNAL INTERRUPT 1 ENABLE
0000             69   ET1    BIT   0ABH  ;IE.3 - TIMER 1 INTERRUPT ENABLE
0000             70   ES     BIT   0ACH  ;IE.4 - SERIAL PORT INTERRUPT ENABLE
0000             71   ET2    BIT   0ADH  ;IE.5 - TIMER 2 INTERRUPT ENABLE
0000             72   EA     BIT   0AFH  ;IE.7 - GLOBAL INTERRUPT ENABLE
0000             73   RXD    BIT   0B0H  ;P3.0 - SERIAL PORT RECEIVE INPUT
0000             74   TXD    BIT   0B1H  ;P3.1 - SERIAL PORT TRANSMIT OUTPUT
0000             75   INT0   BIT   0B2H  ;P3.2 - EXTERNAL INTERRUPT 0 INPUT
0000             76   INT1   BIT   0B3H  ;P3.3 - EXTERNAL INTERRUPT 1 INPUT
0000             77   T0     BIT   0B4H  ;P3.4 - TIMER 0 COUNT INPUT
0000             78   T1     BIT   0B5H  ;P3.5 - TIMER 1 COUNT INPUT
0000             79   WR     BIT   0B6H  ;P3.6 - WRITE CONTROL FOR EXT. MEMORY
0000             80   RD     BIT   0B7H  ;P3.7 - READ CONTROL FOR EXT. MEMORY
0000             81   PX0    BIT   0B8H  ;IP.0 - EXTERNAL INTERRUPT 0 PRIORITY
0000             82   PT0    BIT   0B9H  ;IP.1 - TIMER 0 PRIORITY
0000             83   PX1    BIT   0BAH  ;IP.2 - EXTERNAL INTERRUPT 1 PRIORITY
0000             84   PT1    BIT   0BBH  ;IP.3 - TIMER 1 PRIORITY
0000             85   PS     BIT   0BCH  ;IP.4 - SERIAL PORT PRIORITY
0000             86   PT2    BIT   0BDH  ;IP.5 - TIMER 2 PRIORITY
0000             87   CAP2   BIT   0C8H  ;T2CON.0 - CAPTURE OR RELOAD SELECT
0000             88   CNT2   BIT   0C9H  ;T2CON.1 - TIMER OR COUNTER SELECT
0000             89   TR2    BIT   0CAH  ;T2CON.2 - TIMER 2 ON/OFF CONTROL
0000             90   EXEN2  BIT   0CBH  ;T2CON.3 - TIMER 2 EXTERNAL ENABLE FLAG
0000             91   TCLK   BIT   0CCH  ;T2CON.4 - TRANSMIT CLOCK SELECT
0000             92   RCLK   BIT   0CDH  ;T2CON.5 - RECEIVE CLOCK SELECTT
0000             93   EXF2   BIT   0CEH  ;T2CON.6 - EXTERNAL TRANSITION FLAG
0000             94   TF2    BIT   0CFH  ;T2CON.7 - TIMER 2 OVERFLOW FLAG
0000             95   P      BIT   0D0H  ;PSW.0 - ACCUMULATOR PARITY FLAG
0000             96   OV     BIT   0D2H  ;PSW.2 - OVERFLOW FLAG
0000             97   RS0    BIT   0D3H  ;PSW.3 - REGISTER BANK SELECT 0
0000             98   RS1    BIT   0D4H  ;PSW.4 - REGISTER BANK SELECT 1
0000             99   F0     BIT   0D5H  ;PSW.5 - FLAG 0
0000            100   AC     BIT   0D6H  ;PSW.6 - AUXILIARY CARRY FLAG
0000            101   CY     BIT   0D7H  ;PSW.7 - CARRY FLAG
0000            102   
0000            103   ; For the altera DE2 configured with an 8051/8052 softcore processor
0000            104   ; we have the following extra registers:
0000            105   
0000            106   HEX0   DATA  091H ; Zero turns the segment on
0000            107   HEX1   DATA  092H ; 
0000            108   HEX2   DATA  093H ; 
0000            109   HEX3   DATA  094H ; 
0000            110   HEX4   DATA  08EH ;
0000            111   HEX5   DATA  08FH ;
0000            112   HEX6   DATA  096H ;
0000            113   HEX7   DATA  097H ;
0000            114   
0000            115   P0MOD  DATA  09AH ; Input/output mode bits for port 0.  '1' sets the port to output mode.
0000            116   P1MOD  DATA  09BH ; Input/output mode bits for port 1
0000            117   P2MOD  DATA  09CH ; Input/output mode bits for port 2
0000            118   P3MOD  DATA  09DH ; Input/output mode bits for port 3
0000            119   
0000            120   LEDRA  DATA  0E8H ; LEDs LEDR0 to LEDR7 (bit addressable, ex: LEDRA.1 for LEDR1)
0000            121   LEDRB  DATA  095H ; LEDs LEDR8 to LEDR15
0000            122   LEDRC  DATA  09EH ; LEDs LEDR16, LEDR15, and LEDG8
0000            123   LEDG   DATA  0F8H ; LEDs LEDG0 to LEDG7 (bit addressable, ex: LEDG.3 for LEDG3)
0000            124   SWA    DATA  0E8H ; Switches SW0 to SW7 (bit addressable, ex: SWA.1 for SW1)
0000            125   SWB    DATA  095H ; Switches SW8 to SW15
0000            126   SWC    DATA  09EH ; Switches SW16 and SW17
0000            127   KEY    DATA  0F8H ; KEY1=KEY.1, KEY2=KEY.2, KEY3=KEY.3.  KEY0 is the reset button! 
0000            128   
0000            129   LCD_CMD   DATA 0D8H ;
0000            130   LCD_DATA  DATA 0D9H ;
0000            131   LCD_MOD   DATA 0DAH ; Write 0xff to make LCD_DATA an output
0000            132   LCD_RW    BIT  0D8H ; '0' writes to LCD
0000            133   LCD_EN    BIT  0D9H ; Toggle from '1' to '0'
0000            134   LCD_RS    BIT  0DAH ; '0' for commands, '1' for data
0000            135   LCD_ON    BIT  0DBH ; Write '1' to power the LCD
0000            136   LCD_BLON  BIT  0DCH ; Write '1' to turn on back light
0000            137   
0000            138   FLASH_CMD  data 0DBH ; The control bits of the flash memory:
0000            139   ; bit 0: FL_RST_N  Set to 1 for normal operation
0000            140   ; bit 1: FL_WE_N
0000            141   ; bit 2: FL_OE_N
0000            142   ; bit 3: FL_CE_N
0000            143   FLASH_DATA data 0DCH ; 8-bit data bus of flash memory.
0000            144   FLASH_MOD  data 0DDH ; 0xff makes FLASH_DATA output.  0x00 makes FLASH_DATA input.
0000            145   FLASH_ADD0 data 0E1H ; address bits 0 to 7.
0000            146   FLASH_ADD1 data 0E2H ; address bits 8 to 15.
0000            147   FLASH_ADD2 data 0E3H ; address bits 16 to 21.
0000            148   
0000              2   
0000              3   org 0000H ; Which code memory location to start at after reset
0000 020010       4            ljmp pgrmstart  ; jump down to the label called "pgrmstart"
0003              5   
0003              6   ;These three values are associated with the timing of the circuit
0003              7   ;Tune them to set the "heartbeat" of the program
0003              8   ;The time between "heartbeats" is a function of product of these three
0003              9   ;But none of them can be over 255 (8 bit)
0003             10   S_TICKS EQU #100
0003             11   M_TICKS EQU #100
0003             12   L_TICKS EQU #90
0003             13   
0003             14   ; Look-up table for my student number
0003             15   ; Least sig to most sig
0003             16   ; My student num: 48059760
0003             17   ; last one is just blank
0003             18   T_StuNum:
0003             19            ;       0       6         7        9    5        0        8        4    
0003 40027810    20            DB 40H, 02H, 78H, 10H, 12H, 40H, 00H, 19H
     12400019
000B             21            ; BLANK
000B 7F          22            DB 7FH
000C             23            ;   H    E        L        O
000C 8986C740    24            DB 89H, 86H, 0xC7H, 40H
0010             25   
0010             26   ;This is a "function", it takes two parameters. These parameters can be accessed using %0 and %1
                 27   Display_on mac
                 28   	mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
                 29   	
                 30   	mov dptr, #T_StuNum ; point to student number lookup table
                 31   	mov a, %1 ; Load second input into accumulator
                 32   	movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
                 33   	
                 34   	mov %0, a ; Display number to given (first input) register
                 35   
                 36   	mov a, b ; Restore value of accumulator (just in case I was doing something important before)
                 37   endmac
0010             38   
0010             39   ;This is a "function", it takes no parameters. It just displays the first 6 digits of my student number
                 40   Most_sig mac
                 41   	Display_on(HEX0, #02)
                 42   	Display_on(HEX1, #03)
                 43   	Display_on(HEX2, #04)
                 44   	Display_on(HEX3, #05)
                 45   	Display_on(HEX4, #06)
                 46   	Display_on(HEX5, #07)
                 47   endmac
0010             48   
0010             49   ;This is a "function", it takes no parameters. It just displays all blank
                 50   All_blnk mac
                 51   	Display_on(HEX0, #08)
                 52   	Display_on(HEX1, #08)
                 53   	Display_on(HEX2, #08)
                 54   	Display_on(HEX3, #08)
                 55   	Display_on(HEX4, #08)
                 56   	Display_on(HEX5, #08)
                 57   endmac
0010             58   
0010             59   ;This is a "function", it takes no parameters. It just displays the last 6 digits of my student number
                 60   Least_sig mac
                 61   	Display_on(HEX0, #00)
                 62   	Display_on(HEX1, #01)
                 63   	Display_on(HEX2, #02)
                 64   	Display_on(HEX3, #03)
                 65   	Display_on(HEX4, #04)
                 66   	Display_on(HEX5, #05)
                 67   endmac
0010             68   
0010             69   ;This is a "function", it takes no parameters. It just displays HELLO
                 70   Hello mac
                 71   	Display_on(HEX0, #08H)
                 72   	Display_on(HEX1, #0CH)
                 73   	Display_on(HEX2, #0BH)
                 74   	Display_on(HEX3, #0BH)
                 75   	Display_on(HEX4, #0AH)
                 76   	Display_on(HEX5, #09H)
                 77   endmac
0010             78   
0010             79   ;This is a "function", it takes no parameters. It just displays the custom display for mode 7
                 80   Custom_disp mac
                 81   	; Up to you to implement
                 82   endmac
0010             83   
0010             84   ; The code under this label runs once, when the program starts
0010             85   pgrmstart:
0010             86            ; Turns off LEDs and stuff
0010 75817F      87            mov SP, #0x7f
0013 75E800      88            mov LEDRA, #0 ; Bit addressable
0016 759500      89            mov LEDRB, #0 ; Not bit addressable
0019             90            
0019             91            ; Start timer
0019 7964        92            mov r1, S_TICKS
001B 7A64        93            mov r2, M_TICKS
001D 7B5A        94            mov r3, L_TICKS
001F             95            
001F             96            ; Mode 0 by default, display first 6 digits
001F F5F0        97            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0021             97            
0021 900003      97            mov dptr, #T_StuNum ; point to student number lookup table
0024 7402        97            mov a, #02 ; Load second input into accumulator
0026 93          97            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0027             97            
0027 F591        97            mov HEX0, a ; Display number to given (first input) register
0029             97   
0029 E5F0        97            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
002B F5F0        97            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
002D             97            
002D 900003      97            mov dptr, #T_StuNum ; point to student number lookup table
0030 7403        97            mov a, #03 ; Load second input into accumulator
0032 93          97            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0033             97            
0033 F592        97            mov HEX1, a ; Display number to given (first input) register
0035             97   
0035 E5F0        97            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0037 F5F0        97            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0039             97            
0039 900003      97            mov dptr, #T_StuNum ; point to student number lookup table
003C 7404        97            mov a, #04 ; Load second input into accumulator
003E 93          97            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
003F             97            
003F F593        97            mov HEX2, a ; Display number to given (first input) register
0041             97   
0041 E5F0        97            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0043 F5F0        97            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0045             97            
0045 900003      97            mov dptr, #T_StuNum ; point to student number lookup table
0048 7405        97            mov a, #05 ; Load second input into accumulator
004A 93          97            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
004B             97            
004B F594        97            mov HEX3, a ; Display number to given (first input) register
004D             97   
004D E5F0        97            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
004F F5F0        97            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0051             97            
0051 900003      97            mov dptr, #T_StuNum ; point to student number lookup table
0054 7406        97            mov a, #06 ; Load second input into accumulator
0056 93          97            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0057             97            
0057 F58E        97            mov HEX4, a ; Display number to given (first input) register
0059             97   
0059 E5F0        97            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
005B F5F0        97            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
005D             97            
005D 900003      97            mov dptr, #T_StuNum ; point to student number lookup table
0060 7407        97            mov a, #07 ; Load second input into accumulator
0062 93          97            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0063             97            
0063 F58F        97            mov HEX5, a ; Display number to given (first input) register
0065             97   
0065 E5F0        97            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0067             98            
0067             99   ; The code under this label runs continuously
0067            100   loop:
0067            101            ; Latching logic
0067 20FB03     102            jb key.3, ENDLATCHtmp   ; jump if bit 3 of switch is = 1
006A 020070     103            ljmp LATCHLOGIC
006D 0202B2     104   ENDLATCHtmp: ljmp ENDLATCH       ; I have to do this weird jumping bc jb can only jump up to 127 lines
0070            105   
0070            106   ; The code under this label has to do with latching our mode, and updating the display
0070            107   ; to the "first frame" of that mode
0070            108   LATCHLOGIC:
0070 A8E8       109            mov r0, SWA                     ; store switch values in r0
0072            110            ; Evaluate initial display depending on mode
0072 E8         111            mov a, r0                               
0073 5407       112            ANL a, #07                              ; strip A to only the least significant 3 values by ANDing it with 00000111 (Not strictly nesc.)
0075            113            
0075            114            ; Think of this as a big Switch statement that finds what mode we are in
0075            115            ; There is a better way to do this, as a lot of the modes have the same start
0075            116            ; However, to start with this is a more clear way to see what is going on
0075 B4004B     117            CJNE a, #00, MODE1              ; jump if A != byte
0078            118            ; Mode 0
0078 F5F0       119            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
007A            119            
007A 900003     119            mov dptr, #T_StuNum ; point to student number lookup table
007D 7402       119            mov a, #02 ; Load second input into accumulator
007F 93         119            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0080            119            
0080 F591       119            mov HEX0, a ; Display number to given (first input) register
0082            119   
0082 E5F0       119            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0084 F5F0       119            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0086            119            
0086 900003     119            mov dptr, #T_StuNum ; point to student number lookup table
0089 7403       119            mov a, #03 ; Load second input into accumulator
008B 93         119            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
008C            119            
008C F592       119            mov HEX1, a ; Display number to given (first input) register
008E            119   
008E E5F0       119            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0090 F5F0       119            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0092            119            
0092 900003     119            mov dptr, #T_StuNum ; point to student number lookup table
0095 7404       119            mov a, #04 ; Load second input into accumulator
0097 93         119            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0098            119            
0098 F593       119            mov HEX2, a ; Display number to given (first input) register
009A            119   
009A E5F0       119            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
009C F5F0       119            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
009E            119            
009E 900003     119            mov dptr, #T_StuNum ; point to student number lookup table
00A1 7405       119            mov a, #05 ; Load second input into accumulator
00A3 93         119            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00A4            119            
00A4 F594       119            mov HEX3, a ; Display number to given (first input) register
00A6            119   
00A6 E5F0       119            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
00A8 F5F0       119            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
00AA            119            
00AA 900003     119            mov dptr, #T_StuNum ; point to student number lookup table
00AD 7406       119            mov a, #06 ; Load second input into accumulator
00AF 93         119            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00B0            119            
00B0 F58E       119            mov HEX4, a ; Display number to given (first input) register
00B2            119   
00B2 E5F0       119            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
00B4 F5F0       119            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
00B6            119            
00B6 900003     119            mov dptr, #T_StuNum ; point to student number lookup table
00B9 7407       119            mov a, #07 ; Load second input into accumulator
00BB 93         119            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00BC            119            
00BC F58F       119            mov HEX5, a ; Display number to given (first input) register
00BE            119   
00BE E5F0       119            mov a, b ; Restore value of accumulator (just in case I was doing something important before) ; display first 6 digits
00C0            120            
00C0 0202B2     121            ljmp ENDLATCH   
00C3 B40163     122   MODE1:   CJNE a, #01, MODE2              ; jump if A != byte 
00C6            123            ; Mode 1
00C6 F5F0       124            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
00C8            124            
00C8 900003     124            mov dptr, #T_StuNum ; point to student number lookup table
00CB 7408       124            mov a, #08 ; Load second input into accumulator
00CD 93         124            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00CE            124            
00CE F591       124            mov HEX0, a ; Display number to given (first input) register
00D0            124   
00D0 E5F0       124            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
00D2 F5F0       124            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
00D4            124            
00D4 900003     124            mov dptr, #T_StuNum ; point to student number lookup table
00D7 7408       124            mov a, #08 ; Load second input into accumulator
00D9 93         124            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00DA            124            
00DA F592       124            mov HEX1, a ; Display number to given (first input) register
00DC            124   
00DC E5F0       124            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
00DE F5F0       124            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
00E0            124            
00E0 900003     124            mov dptr, #T_StuNum ; point to student number lookup table
00E3 7408       124            mov a, #08 ; Load second input into accumulator
00E5 93         124            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00E6            124            
00E6 F593       124            mov HEX2, a ; Display number to given (first input) register
00E8            124   
00E8 E5F0       124            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
00EA F5F0       124            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
00EC            124            
00EC 900003     124            mov dptr, #T_StuNum ; point to student number lookup table
00EF 7408       124            mov a, #08 ; Load second input into accumulator
00F1 93         124            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00F2            124            
00F2 F594       124            mov HEX3, a ; Display number to given (first input) register
00F4            124   
00F4 E5F0       124            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
00F6 F5F0       124            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
00F8            124            
00F8 900003     124            mov dptr, #T_StuNum ; point to student number lookup table
00FB 7408       124            mov a, #08 ; Load second input into accumulator
00FD 93         124            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00FE            124            
00FE F58E       124            mov HEX4, a ; Display number to given (first input) register
0100            124   
0100 E5F0       124            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0102 F5F0       124            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0104            124            
0104 900003     124            mov dptr, #T_StuNum ; point to student number lookup table
0107 7408       124            mov a, #08 ; Load second input into accumulator
0109 93         124            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
010A            124            
010A F58F       124            mov HEX5, a ; Display number to given (first input) register
010C            124   
010C E5F0       124            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
010E F5F0       125            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0110            125            
0110 900003     125            mov dptr, #T_StuNum ; point to student number lookup table
0113 7400       125            mov a, #00 ; Load second input into accumulator
0115 93         125            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0116            125            
0116 F591       125            mov HEX0, a ; Display number to given (first input) register
0118            125   
0118 E5F0       125            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
011A F5F0       126            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
011C            126            
011C 900003     126            mov dptr, #T_StuNum ; point to student number lookup table
011F 7401       126            mov a, #01 ; Load second input into accumulator
0121 93         126            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0122            126            
0122 F592       126            mov HEX1, a ; Display number to given (first input) register
0124            126   
0124 E5F0       126            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0126            127                    
0126 0202B2     128            ljmp ENDLATCH
0129 B4024B     129   MODE2:   CJNE a, #02, MODE3              ; jump if A != byte 
012C            130            ; Mode 2
012C F5F0       131            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
012E            131            
012E 900003     131            mov dptr, #T_StuNum ; point to student number lookup table
0131 7402       131            mov a, #02 ; Load second input into accumulator
0133 93         131            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0134            131            
0134 F591       131            mov HEX0, a ; Display number to given (first input) register
0136            131   
0136 E5F0       131            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0138 F5F0       131            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
013A            131            
013A 900003     131            mov dptr, #T_StuNum ; point to student number lookup table
013D 7403       131            mov a, #03 ; Load second input into accumulator
013F 93         131            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0140            131            
0140 F592       131            mov HEX1, a ; Display number to given (first input) register
0142            131   
0142 E5F0       131            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0144 F5F0       131            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0146            131            
0146 900003     131            mov dptr, #T_StuNum ; point to student number lookup table
0149 7404       131            mov a, #04 ; Load second input into accumulator
014B 93         131            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
014C            131            
014C F593       131            mov HEX2, a ; Display number to given (first input) register
014E            131   
014E E5F0       131            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0150 F5F0       131            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0152            131            
0152 900003     131            mov dptr, #T_StuNum ; point to student number lookup table
0155 7405       131            mov a, #05 ; Load second input into accumulator
0157 93         131            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0158            131            
0158 F594       131            mov HEX3, a ; Display number to given (first input) register
015A            131   
015A E5F0       131            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
015C F5F0       131            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
015E            131            
015E 900003     131            mov dptr, #T_StuNum ; point to student number lookup table
0161 7406       131            mov a, #06 ; Load second input into accumulator
0163 93         131            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0164            131            
0164 F58E       131            mov HEX4, a ; Display number to given (first input) register
0166            131   
0166 E5F0       131            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0168 F5F0       131            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
016A            131            
016A 900003     131            mov dptr, #T_StuNum ; point to student number lookup table
016D 7407       131            mov a, #07 ; Load second input into accumulator
016F 93         131            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0170            131            
0170 F58F       131            mov HEX5, a ; Display number to given (first input) register
0172            131   
0172 E5F0       131            mov a, b ; Restore value of accumulator (just in case I was doing something important before) ; display first 6 digits
0174            132            
0174 0202B2     133            ljmp ENDLATCH
0177 B4034B     134   MODE3:   CJNE a, #03, MODE4              ; jump if A != byte 
017A            135            ; Mode 3
017A F5F0       136            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
017C            136            
017C 900003     136            mov dptr, #T_StuNum ; point to student number lookup table
017F 7402       136            mov a, #02 ; Load second input into accumulator
0181 93         136            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0182            136            
0182 F591       136            mov HEX0, a ; Display number to given (first input) register
0184            136   
0184 E5F0       136            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0186 F5F0       136            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0188            136            
0188 900003     136            mov dptr, #T_StuNum ; point to student number lookup table
018B 7403       136            mov a, #03 ; Load second input into accumulator
018D 93         136            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
018E            136            
018E F592       136            mov HEX1, a ; Display number to given (first input) register
0190            136   
0190 E5F0       136            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0192 F5F0       136            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0194            136            
0194 900003     136            mov dptr, #T_StuNum ; point to student number lookup table
0197 7404       136            mov a, #04 ; Load second input into accumulator
0199 93         136            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
019A            136            
019A F593       136            mov HEX2, a ; Display number to given (first input) register
019C            136   
019C E5F0       136            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
019E F5F0       136            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
01A0            136            
01A0 900003     136            mov dptr, #T_StuNum ; point to student number lookup table
01A3 7405       136            mov a, #05 ; Load second input into accumulator
01A5 93         136            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01A6            136            
01A6 F594       136            mov HEX3, a ; Display number to given (first input) register
01A8            136   
01A8 E5F0       136            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
01AA F5F0       136            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
01AC            136            
01AC 900003     136            mov dptr, #T_StuNum ; point to student number lookup table
01AF 7406       136            mov a, #06 ; Load second input into accumulator
01B1 93         136            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01B2            136            
01B2 F58E       136            mov HEX4, a ; Display number to given (first input) register
01B4            136   
01B4 E5F0       136            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
01B6 F5F0       136            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
01B8            136            
01B8 900003     136            mov dptr, #T_StuNum ; point to student number lookup table
01BB 7407       136            mov a, #07 ; Load second input into accumulator
01BD 93         136            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01BE            136            
01BE F58F       136            mov HEX5, a ; Display number to given (first input) register
01C0            136   
01C0 E5F0       136            mov a, b ; Restore value of accumulator (just in case I was doing something important before) ; display first 6 digits
01C2            137            
01C2 0202B2     138            ljmp ENDLATCH
01C5 B4044B     139   MODE4:   CJNE a, #04, MODE5              ; jump if A != byte 
01C8            140            ; Mode 4
01C8 F5F0       141            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
01CA            141            
01CA 900003     141            mov dptr, #T_StuNum ; point to student number lookup table
01CD 7400       141            mov a, #00 ; Load second input into accumulator
01CF 93         141            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01D0            141            
01D0 F591       141            mov HEX0, a ; Display number to given (first input) register
01D2            141   
01D2 E5F0       141            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
01D4 F5F0       141            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
01D6            141            
01D6 900003     141            mov dptr, #T_StuNum ; point to student number lookup table
01D9 7401       141            mov a, #01 ; Load second input into accumulator
01DB 93         141            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01DC            141            
01DC F592       141            mov HEX1, a ; Display number to given (first input) register
01DE            141   
01DE E5F0       141            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
01E0 F5F0       141            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
01E2            141            
01E2 900003     141            mov dptr, #T_StuNum ; point to student number lookup table
01E5 7402       141            mov a, #02 ; Load second input into accumulator
01E7 93         141            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01E8            141            
01E8 F593       141            mov HEX2, a ; Display number to given (first input) register
01EA            141   
01EA E5F0       141            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
01EC F5F0       141            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
01EE            141            
01EE 900003     141            mov dptr, #T_StuNum ; point to student number lookup table
01F1 7403       141            mov a, #03 ; Load second input into accumulator
01F3 93         141            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01F4            141            
01F4 F594       141            mov HEX3, a ; Display number to given (first input) register
01F6            141   
01F6 E5F0       141            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
01F8 F5F0       141            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
01FA            141            
01FA 900003     141            mov dptr, #T_StuNum ; point to student number lookup table
01FD 7404       141            mov a, #04 ; Load second input into accumulator
01FF 93         141            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0200            141            
0200 F58E       141            mov HEX4, a ; Display number to given (first input) register
0202            141   
0202 E5F0       141            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0204 F5F0       141            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0206            141            
0206 900003     141            mov dptr, #T_StuNum ; point to student number lookup table
0209 7405       141            mov a, #05 ; Load second input into accumulator
020B 93         141            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
020C            141            
020C F58F       141            mov HEX5, a ; Display number to given (first input) register
020E            141   
020E E5F0       141            mov a, b ; Restore value of accumulator (just in case I was doing something important before) ; display last 6 digits
0210            142            
0210 0202B2     143            ljmp ENDLATCH
0213 B4054B     144   MODE5:   CJNE a, #05, MODE6              ; jump if A != byte 
0216            145            ; Mode 5
0216 F5F0       146            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0218            146            
0218 900003     146            mov dptr, #T_StuNum ; point to student number lookup table
021B 7408       146            mov a, #08 ; Load second input into accumulator
021D 93         146            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
021E            146            
021E F591       146            mov HEX0, a ; Display number to given (first input) register
0220            146   
0220 E5F0       146            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0222 F5F0       146            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0224            146            
0224 900003     146            mov dptr, #T_StuNum ; point to student number lookup table
0227 7408       146            mov a, #08 ; Load second input into accumulator
0229 93         146            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
022A            146            
022A F592       146            mov HEX1, a ; Display number to given (first input) register
022C            146   
022C E5F0       146            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
022E F5F0       146            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0230            146            
0230 900003     146            mov dptr, #T_StuNum ; point to student number lookup table
0233 7408       146            mov a, #08 ; Load second input into accumulator
0235 93         146            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0236            146            
0236 F593       146            mov HEX2, a ; Display number to given (first input) register
0238            146   
0238 E5F0       146            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
023A F5F0       146            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
023C            146            
023C 900003     146            mov dptr, #T_StuNum ; point to student number lookup table
023F 7408       146            mov a, #08 ; Load second input into accumulator
0241 93         146            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0242            146            
0242 F594       146            mov HEX3, a ; Display number to given (first input) register
0244            146   
0244 E5F0       146            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0246 F5F0       146            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0248            146            
0248 900003     146            mov dptr, #T_StuNum ; point to student number lookup table
024B 7408       146            mov a, #08 ; Load second input into accumulator
024D 93         146            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
024E            146            
024E F58E       146            mov HEX4, a ; Display number to given (first input) register
0250            146   
0250 E5F0       146            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0252 F5F0       146            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0254            146            
0254 900003     146            mov dptr, #T_StuNum ; point to student number lookup table
0257 7408       146            mov a, #08 ; Load second input into accumulator
0259 93         146            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
025A            146            
025A F58F       146            mov HEX5, a ; Display number to given (first input) register
025C            146   
025C E5F0       146            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
025E            147            
025E 0202B2     148            ljmp ENDLATCH
0261 B4064B     149   MODE6:   CJNE a, #06, MODE7              ; jump if A != byte 
0264            150            ; Mode 6
0264 F5F0       151            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0266            151            
0266 900003     151            mov dptr, #T_StuNum ; point to student number lookup table
0269 7408       151            mov a, #08H ; Load second input into accumulator
026B 93         151            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
026C            151            
026C F591       151            mov HEX0, a ; Display number to given (first input) register
026E            151   
026E E5F0       151            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0270 F5F0       151            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0272            151            
0272 900003     151            mov dptr, #T_StuNum ; point to student number lookup table
0275 740C       151            mov a, #0CH ; Load second input into accumulator
0277 93         151            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0278            151            
0278 F592       151            mov HEX1, a ; Display number to given (first input) register
027A            151   
027A E5F0       151            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
027C F5F0       151            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
027E            151            
027E 900003     151            mov dptr, #T_StuNum ; point to student number lookup table
0281 740B       151            mov a, #0BH ; Load second input into accumulator
0283 93         151            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0284            151            
0284 F593       151            mov HEX2, a ; Display number to given (first input) register
0286            151   
0286 E5F0       151            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0288 F5F0       151            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
028A            151            
028A 900003     151            mov dptr, #T_StuNum ; point to student number lookup table
028D 740B       151            mov a, #0BH ; Load second input into accumulator
028F 93         151            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0290            151            
0290 F594       151            mov HEX3, a ; Display number to given (first input) register
0292            151   
0292 E5F0       151            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0294 F5F0       151            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0296            151            
0296 900003     151            mov dptr, #T_StuNum ; point to student number lookup table
0299 740A       151            mov a, #0AH ; Load second input into accumulator
029B 93         151            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
029C            151            
029C F58E       151            mov HEX4, a ; Display number to given (first input) register
029E            151   
029E E5F0       151            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
02A0 F5F0       151            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
02A2            151            
02A2 900003     151            mov dptr, #T_StuNum ; point to student number lookup table
02A5 7409       151            mov a, #09H ; Load second input into accumulator
02A7 93         151            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
02A8            151            
02A8 F58F       151            mov HEX5, a ; Display number to given (first input) register
02AA            151   
02AA E5F0       151            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
02AC            152            
02AC 0202B2     153            ljmp ENDLATCH
02AF            154   MODE7:   ; this should be the "else" case
02AF            155            ; Mode 7
02AF            156            ; Up to you to implement
02AF            157            
02AF 0202B2     158            ljmp ENDLATCH   
02B2            159   ENDLATCH: 
02B2            160   
02B2            161   ; The code under this label has to do with timekeeping
02B2            162   TIMELOGIC:       
02B2            163            ; Timing logic
02B2 D90C       164            djnz r1, ENDTIME
02B4 7964       165            mov r1, S_TICKS         ; if we got here, that means r1 is zero
02B6 DA08       166            djnz r2, ENDTIME
02B8 7A64       167            mov r2, M_TICKS         ; if we got here, that means r2 is zero
02BA DB04       168            djnz r3, ENDTIME
02BC 7B5A       169            mov r3, L_TICKS         ; if we got here, that means r3 is zero
02BE            170            
02BE            171            ; these lines execute once a "heartbeat"
02BE B2E8       172            cpl LEDRA.0             ;flip LED to visualize heartbeat
02C0            173            
02C0            174   ENDTIME:
02C0            175   
02C0 020067     176            ljmp loop ; Go back up to Forever to keep repeating forever
02C3            177   END
