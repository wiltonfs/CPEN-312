                 -1   $MODDE0CV ; Special Function Registers declaration for CV-8052
0000              1   ;  MODDDE2: Register definition for DE2-8052 softcore
0000              2   ;
0000              3   ;   Copyright (C) 2011  Jesus Calvino-Fraga, jesusc at ece.ubc.ca
0000              4   ;
0000              5   ;   This library is free software; you can redistribute it and/or
0000              6   ;   modify it under the terms of the GNU Lesser General Public
0000              7   ;   License as published by the Free Software Foundation; either
0000              8   ;   version 2.1 of the License, or (at your option) any later version.
0000              9   ;
0000             10   ;   This library is distributed in the hope that it will be useful,
0000             11   ;   but WITHOUT ANY WARRANTY; without even the implied warranty of
0000             12   ;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
0000             13   ;   Lesser General Public License for more details.
0000             14   ;
0000             15   ;   You should have received a copy of the GNU Lesser General Public
0000             16   ;   License along with this library; if not, write to the Free Software
0000             17   ;   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
0000             18   ;
0000             19       
0000             20   P0     DATA  080H  ;PORT 0
0000             21   SP     DATA  081H  ;STACK POINTER
0000             22   DPL    DATA  082H  ;DATA POINTER 0 - LOW BYTE
0000             23   DPH    DATA  083H  ;DATA POINTER 0 - HIGH BYTE
0000             24   DPL1   DATA  084H  ;DATA POINTER 1 - LOW BYTE
0000             25   DPH1   DATA  085H  ;DATA POINTER 1 - HIGH BYTE
0000             26   DPS    DATA  086H  ;DATA POINTER SELECT. DPH1, DPL1 active when DPS.0=1
0000             27   PCON   DATA  087H  ;POWER CONTROL
0000             28   TCON   DATA  088H  ;TIMER CONTROL
0000             29   TMOD   DATA  089H  ;TIMER MODE
0000             30   TL0    DATA  08AH  ;TIMER 0 - LOW BYTE
0000             31   TL1    DATA  08BH  ;TIMER 1 - LOW BYTE
0000             32   TH0    DATA  08CH  ;TIMER 0 - HIGH BYTE
0000             33   TH1    DATA  08DH  ;TIMER 1 - HIGH BYTE
0000             34   P1     DATA  090H  ;PORT 1
0000             35   SCON   DATA  098H  ;SERIAL PORT CONTROL
0000             36   SBUF   DATA  099H  ;SERIAL PORT BUFFER
0000             37   P2     DATA  0A0H  ;PORT 2
0000             38   IE     DATA  0A8H  ;INTERRUPT ENABLE
0000             39   P3     DATA  0B0H  ;PORT 3
0000             40   IP     DATA  0B8H  ;INTERRUPT PRIORITY
0000             41   T2CON  DATA  0C8H  ;TIMER 2 CONTROL
0000             42   T2MOD  DATA  0C9H  ;TIMER 2 MODE
0000             43   RCAP2L DATA  0CAH  ;TIMER 2 CAPTURE REGISTER - LOW BYTE
0000             44   RCAP2H DATA  0CBH  ;TIMER 2 CAPTURE REGISTER - HIGH BYTE
0000             45   TL2    DATA  0CCH  ;TIMER 2 - LOW BYTE
0000             46   TH2    DATA  0CDH  ;TIMER 2 - HIGH BYTE
0000             47   PSW    DATA  0D0H  ;PROGRAM STATUS WORD
0000             48   ACC    DATA  0E0H  ;ACCUMULATOR
0000             49   B      DATA  0F0H  ;MULTIPLICATION REGISTER
0000             50   IT0    BIT   088H  ;TCON.0 - EXT. INTERRUPT 0 TYPE
0000             51   IE0    BIT   089H  ;TCON.1 - EXT. INTERRUPT 0 EDGE FLAG
0000             52   IT1    BIT   08AH  ;TCON.2 - EXT. INTERRUPT 1 TYPE
0000             53   IE1    BIT   08BH  ;TCON.3 - EXT. INTERRUPT 1 EDGE FLAG
0000             54   TR0    BIT   08CH  ;TCON.4 - TIMER 0 ON/OFF CONTROL
0000             55   TF0    BIT   08DH  ;TCON.5 - TIMER 0 OVERFLOW FLAG
0000             56   TR1    BIT   08EH  ;TCON.6 - TIMER 1 ON/OFF CONTROL
0000             57   TF1    BIT   08FH  ;TCON.7 - TIMER 1 OVERFLOW FLAG
0000             58   RI     BIT   098H  ;SCON.0 - RECEIVE INTERRUPT FLAG
0000             59   TI     BIT   099H  ;SCON.1 - TRANSMIT INTERRUPT FLAG
0000             60   RB8    BIT   09AH  ;SCON.2 - RECEIVE BIT 8
0000             61   TB8    BIT   09BH  ;SCON.3 - TRANSMIT BIT 8
0000             62   REN    BIT   09CH  ;SCON.4 - RECEIVE ENABLE
0000             63   SM2    BIT   09DH  ;SCON.5 - SERIAL MODE CONTROL BIT 2
0000             64   SM1    BIT   09EH  ;SCON.6 - SERIAL MODE CONTROL BIT 1
0000             65   SM0    BIT   09FH  ;SCON.7 - SERIAL MODE CONTROL BIT 0
0000             66   EX0    BIT   0A8H  ;IE.0 - EXTERNAL INTERRUPT 0 ENABLE
0000             67   ET0    BIT   0A9H  ;IE.1 - TIMER 0 INTERRUPT ENABLE
0000             68   EX1    BIT   0AAH  ;IE.2 - EXTERNAL INTERRUPT 1 ENABLE
0000             69   ET1    BIT   0ABH  ;IE.3 - TIMER 1 INTERRUPT ENABLE
0000             70   ES     BIT   0ACH  ;IE.4 - SERIAL PORT INTERRUPT ENABLE
0000             71   ET2    BIT   0ADH  ;IE.5 - TIMER 2 INTERRUPT ENABLE
0000             72   EA     BIT   0AFH  ;IE.7 - GLOBAL INTERRUPT ENABLE
0000             73   RXD    BIT   0B0H  ;P3.0 - SERIAL PORT RECEIVE INPUT
0000             74   TXD    BIT   0B1H  ;P3.1 - SERIAL PORT TRANSMIT OUTPUT
0000             75   INT0   BIT   0B2H  ;P3.2 - EXTERNAL INTERRUPT 0 INPUT
0000             76   INT1   BIT   0B3H  ;P3.3 - EXTERNAL INTERRUPT 1 INPUT
0000             77   T0     BIT   0B4H  ;P3.4 - TIMER 0 COUNT INPUT
0000             78   T1     BIT   0B5H  ;P3.5 - TIMER 1 COUNT INPUT
0000             79   WR     BIT   0B6H  ;P3.6 - WRITE CONTROL FOR EXT. MEMORY
0000             80   RD     BIT   0B7H  ;P3.7 - READ CONTROL FOR EXT. MEMORY
0000             81   PX0    BIT   0B8H  ;IP.0 - EXTERNAL INTERRUPT 0 PRIORITY
0000             82   PT0    BIT   0B9H  ;IP.1 - TIMER 0 PRIORITY
0000             83   PX1    BIT   0BAH  ;IP.2 - EXTERNAL INTERRUPT 1 PRIORITY
0000             84   PT1    BIT   0BBH  ;IP.3 - TIMER 1 PRIORITY
0000             85   PS     BIT   0BCH  ;IP.4 - SERIAL PORT PRIORITY
0000             86   PT2    BIT   0BDH  ;IP.5 - TIMER 2 PRIORITY
0000             87   CAP2   BIT   0C8H  ;T2CON.0 - CAPTURE OR RELOAD SELECT
0000             88   CNT2   BIT   0C9H  ;T2CON.1 - TIMER OR COUNTER SELECT
0000             89   TR2    BIT   0CAH  ;T2CON.2 - TIMER 2 ON/OFF CONTROL
0000             90   EXEN2  BIT   0CBH  ;T2CON.3 - TIMER 2 EXTERNAL ENABLE FLAG
0000             91   TCLK   BIT   0CCH  ;T2CON.4 - TRANSMIT CLOCK SELECT
0000             92   RCLK   BIT   0CDH  ;T2CON.5 - RECEIVE CLOCK SELECTT
0000             93   EXF2   BIT   0CEH  ;T2CON.6 - EXTERNAL TRANSITION FLAG
0000             94   TF2    BIT   0CFH  ;T2CON.7 - TIMER 2 OVERFLOW FLAG
0000             95   P      BIT   0D0H  ;PSW.0 - ACCUMULATOR PARITY FLAG
0000             96   OV     BIT   0D2H  ;PSW.2 - OVERFLOW FLAG
0000             97   RS0    BIT   0D3H  ;PSW.3 - REGISTER BANK SELECT 0
0000             98   RS1    BIT   0D4H  ;PSW.4 - REGISTER BANK SELECT 1
0000             99   F0     BIT   0D5H  ;PSW.5 - FLAG 0
0000            100   AC     BIT   0D6H  ;PSW.6 - AUXILIARY CARRY FLAG
0000            101   CY     BIT   0D7H  ;PSW.7 - CARRY FLAG
0000            102   
0000            103   ; For the altera DE2 configured with an 8051/8052 softcore processor
0000            104   ; we have the following extra registers:
0000            105   
0000            106   HEX0   DATA  091H ; Zero turns the segment on
0000            107   HEX1   DATA  092H ; 
0000            108   HEX2   DATA  093H ; 
0000            109   HEX3   DATA  094H ; 
0000            110   HEX4   DATA  08EH ;
0000            111   HEX5   DATA  08FH ;
0000            112   HEX6   DATA  096H ;
0000            113   HEX7   DATA  097H ;
0000            114   
0000            115   P0MOD  DATA  09AH ; Input/output mode bits for port 0.  '1' sets the port to output mode.
0000            116   P1MOD  DATA  09BH ; Input/output mode bits for port 1
0000            117   P2MOD  DATA  09CH ; Input/output mode bits for port 2
0000            118   P3MOD  DATA  09DH ; Input/output mode bits for port 3
0000            119   
0000            120   LEDRA  DATA  0E8H ; LEDs LEDR0 to LEDR7 (bit addressable, ex: LEDRA.1 for LEDR1)
0000            121   LEDRB  DATA  095H ; LEDs LEDR8 to LEDR15
0000            122   LEDRC  DATA  09EH ; LEDs LEDR16, LEDR15, and LEDG8
0000            123   LEDG   DATA  0F8H ; LEDs LEDG0 to LEDG7 (bit addressable, ex: LEDG.3 for LEDG3)
0000            124   SWA    DATA  0E8H ; Switches SW0 to SW7 (bit addressable, ex: SWA.1 for SW1)
0000            125   SWB    DATA  095H ; Switches SW8 to SW15
0000            126   SWC    DATA  09EH ; Switches SW16 and SW17
0000            127   KEY    DATA  0F8H ; KEY1=KEY.1, KEY2=KEY.2, KEY3=KEY.3.  KEY0 is the reset button! 
0000            128   
0000            129   LCD_CMD   DATA 0D8H ;
0000            130   LCD_DATA  DATA 0D9H ;
0000            131   LCD_MOD   DATA 0DAH ; Write 0xff to make LCD_DATA an output
0000            132   LCD_RW    BIT  0D8H ; '0' writes to LCD
0000            133   LCD_EN    BIT  0D9H ; Toggle from '1' to '0'
0000            134   LCD_RS    BIT  0DAH ; '0' for commands, '1' for data
0000            135   LCD_ON    BIT  0DBH ; Write '1' to power the LCD
0000            136   LCD_BLON  BIT  0DCH ; Write '1' to turn on back light
0000            137   
0000            138   FLASH_CMD  data 0DBH ; The control bits of the flash memory:
0000            139   ; bit 0: FL_RST_N  Set to 1 for normal operation
0000            140   ; bit 1: FL_WE_N
0000            141   ; bit 2: FL_OE_N
0000            142   ; bit 3: FL_CE_N
0000            143   FLASH_DATA data 0DCH ; 8-bit data bus of flash memory.
0000            144   FLASH_MOD  data 0DDH ; 0xff makes FLASH_DATA output.  0x00 makes FLASH_DATA input.
0000            145   FLASH_ADD0 data 0E1H ; address bits 0 to 7.
0000            146   FLASH_ADD1 data 0E2H ; address bits 8 to 15.
0000            147   FLASH_ADD2 data 0E3H ; address bits 16 to 21.
0000            148   
0000              2   
0000              3   org 0000H ; Which code memory location to start at after reset
0000 020010       4            ljmp pgrmstart  ; jump down to the label called "pgrmstart"
0003              5   
0003              6   ;These three values are associated with the timing of the circuit
0003              7   ;Tune them to set the "heartbeat" of the program
0003              8   ;The time between "heartbeats" is a function of product of these three
0003              9   ;But none of them can be over 255 (8 bit)
0003             10   S_TICKS EQU #100
0003             11   M_TICKS EQU #100
0003             12   L_TICKS EQU #150
0003             13   
0003             14   ; Look-up table for my student number, blank, and HELLO
0003             15   ; My student num: 48059760
0003             16   T_StuNum:
0003             17            ;       0       6         7        9    5        0        8        4    
0003 40027810    18            DB 40H, 02H, 78H, 10H, 12H, 40H, 00H, 19H
     12400019
000B             19            ; BLANK
000B 7F          20            DB 7FH
000C             21            ;   H    E        L        O
000C 8986C740    22            DB 89H, 86H, 0xC7H, 40H
0010             23   
0010             24   ;This is a "function", it takes two parameters. These parameters can be accessed using %0 and %1
                 25   Display_on mac
                 26   	mov dptr, #T_StuNum ; point to student number lookup table
                 27   	mov a, %1 ; Load second input into accumulator
                 28   	movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
                 29   	mov %0, a ; Display number to given (first input) register
                 30   endmac
0010             31   
0010             32   ;This is a "function", it takes no parameters. It just displays the first 6 digits of my student number
                 33   Most_sig mac
                 34   	Display_on(r4, #00)
                 35   	Display_on(r5, #01)
                 36   	Display_on(HEX0, #02)
                 37   	Display_on(HEX1, #03)
                 38   	Display_on(HEX2, #04)
                 39   	Display_on(HEX3, #05)
                 40   	Display_on(HEX4, #06)
                 41   	Display_on(HEX5, #07)
                 42   endmac
0010             43   
0010             44   ;This is a "function", it takes no parameters. It just displays all blank
                 45   All_blnk mac
                 46   	Display_on(HEX0, #08)
                 47   	Display_on(HEX1, #08)
                 48   	Display_on(HEX2, #08)
                 49   	Display_on(HEX3, #08)
                 50   	Display_on(HEX4, #08)
                 51   	Display_on(HEX5, #08)
                 52   endmac
0010             53   
0010             54   ;This is a "function", it takes no parameters. It just displays the last 6 digits of my student number
                 55   Least_sig mac
                 56   	Display_on(HEX0, #00)
                 57   	Display_on(HEX1, #01)
                 58   	Display_on(HEX2, #02)
                 59   	Display_on(HEX3, #03)
                 60   	Display_on(HEX4, #04)
                 61   	Display_on(HEX5, #05)
                 62   endmac
0010             63   
0010             64   ;This is a "function", it takes no parameters. It just displays HELLO
                 65   Hello mac
                 66   	Display_on(HEX0, #08H)
                 67   	Display_on(HEX1, #0CH)
                 68   	Display_on(HEX2, #0BH)
                 69   	Display_on(HEX3, #0BH)
                 70   	Display_on(HEX4, #0AH)
                 71   	Display_on(HEX5, #09H)
                 72   endmac
0010             73   
0010             74   ;This is a "function", it takes no parameters. It just displays the custom display for mode 7
                 75   Custom_disp mac
                 76   	; remove 03 and 06
                 77   	Display_on(HEX0, #00)
                 78   	Display_on(HEX1, #01)
                 79   	Display_on(HEX2, #02)
                 80   	Display_on(HEX3, #04)
                 81   	Display_on(HEX4, #05)
                 82   	Display_on(HEX5, #07)
                 83   endmac
0010             84   
                 85   Scrll_left mac
                 86   	mov b, r5 ; "temp" keep
                 87   	
                 88   	mov a, r4
                 89   	mov r5, a
                 90   	mov r4, HEX5
                 91   	mov HEX5, HEX4
                 92   	mov HEX4, HEX3
                 93   	mov HEX3, HEX2
                 94   	mov HEX2, HEX1
                 95   	mov HEX1, HEX0
                 96   	mov HEX0, b
                 97   endmac
0010             98   
                 99   Scrll_right mac
                100   	mov b, HEX0 ; "temp" keep
                101   	
                102   	mov HEX0, HEX1
                103   	mov HEX1, HEX2
                104   	mov HEX2, HEX3
                105   	mov HEX3, HEX4
                106   	mov HEX4, HEX5
                107   	mov HEX5, r4
                108   	mov a, r5
                109   	mov r4, a
                110   	mov r5, b
                111   endmac
0010            112   
0010            113   ; The code under this label runs once, when the program starts
0010            114   pgrmstart:
0010            115            ; Turns off LEDs and stuff
0010 75817F     116            mov SP, #0x7f
0013 75E800     117            mov LEDRA, #0 ; Bit addressable
0016 759500     118            mov LEDRB, #0 ; Not bit addressable
0019            119            
0019            120            ; Start timer
0019 7964       121            mov r1, S_TICKS
001B 7A64       122            mov r2, M_TICKS
001D 7B96       123            mov r3, L_TICKS
001F            124            
001F            125            ; Mode 0 by default, display first 6 digits
001F 900003     126            mov dptr, #T_StuNum ; point to student number lookup table
0022 7400       126            mov a, #00 ; Load second input into accumulator
0024 93         126            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0025 FC         126            mov r4, a ; Display number to given (first input) register
0026 900003     126            mov dptr, #T_StuNum ; point to student number lookup table
0029 7401       126            mov a, #01 ; Load second input into accumulator
002B 93         126            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
002C FD         126            mov r5, a ; Display number to given (first input) register
002D 900003     126            mov dptr, #T_StuNum ; point to student number lookup table
0030 7402       126            mov a, #02 ; Load second input into accumulator
0032 93         126            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0033 F591       126            mov HEX0, a ; Display number to given (first input) register
0035 900003     126            mov dptr, #T_StuNum ; point to student number lookup table
0038 7403       126            mov a, #03 ; Load second input into accumulator
003A 93         126            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
003B F592       126            mov HEX1, a ; Display number to given (first input) register
003D 900003     126            mov dptr, #T_StuNum ; point to student number lookup table
0040 7404       126            mov a, #04 ; Load second input into accumulator
0042 93         126            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0043 F593       126            mov HEX2, a ; Display number to given (first input) register
0045 900003     126            mov dptr, #T_StuNum ; point to student number lookup table
0048 7405       126            mov a, #05 ; Load second input into accumulator
004A 93         126            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
004B F594       126            mov HEX3, a ; Display number to given (first input) register
004D 900003     126            mov dptr, #T_StuNum ; point to student number lookup table
0050 7406       126            mov a, #06 ; Load second input into accumulator
0052 93         126            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0053 F58E       126            mov HEX4, a ; Display number to given (first input) register
0055 900003     126            mov dptr, #T_StuNum ; point to student number lookup table
0058 7407       126            mov a, #07 ; Load second input into accumulator
005A 93         126            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
005B F58F       126            mov HEX5, a ; Display number to given (first input) register
005D            127            
005D            128   ; The code under this label runs continuously
005D            129   loop:
005D            130            ; Latching logic
005D 20FB03     131            jb key.3, ENDLATCHtmp   ; jump if bit 3 of switch is = 1
0060 020066     132            ljmp LATCHLOGIC
0063 020254     133   ENDLATCHtmp: ljmp ENDLATCH       ; I have to do this weird jumping bc jb can only jump up to 127 lines
0066            134   
0066            135   ; The code under this label has to do with latching our mode, and updating the display
0066            136   ; to the "first frame" of that mode
0066            137   LATCHLOGIC:
0066            138            ; Evaluate initial display depending on mode
0066 E5E8       139            mov a, SWA                                                      
0068 5407       140            ANL a, #07                              ; strip A to only the least significant 3 values by ANDing it with 00000111 (Not strictly nesc.)
006A F8         141            mov r0, a                               ; store switch values in r0
006B            142            ; Think of this as a big Switch statement that finds what mode we are in
006B            143            ; There is a better way to do this, as a lot of the modes have the same start
006B            144            ; However, to start with this is a more clear way to see what is going on
006B B80041     145            CJNE r0, #00, MODE1             ; jump if r0 != byte
006E            146            ; Mode 0
006E 900003     147            mov dptr, #T_StuNum ; point to student number lookup table
0071 7400       147            mov a, #00 ; Load second input into accumulator
0073 93         147            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0074 FC         147            mov r4, a ; Display number to given (first input) register
0075 900003     147            mov dptr, #T_StuNum ; point to student number lookup table
0078 7401       147            mov a, #01 ; Load second input into accumulator
007A 93         147            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
007B FD         147            mov r5, a ; Display number to given (first input) register
007C 900003     147            mov dptr, #T_StuNum ; point to student number lookup table
007F 7402       147            mov a, #02 ; Load second input into accumulator
0081 93         147            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0082 F591       147            mov HEX0, a ; Display number to given (first input) register
0084 900003     147            mov dptr, #T_StuNum ; point to student number lookup table
0087 7403       147            mov a, #03 ; Load second input into accumulator
0089 93         147            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
008A F592       147            mov HEX1, a ; Display number to given (first input) register
008C 900003     147            mov dptr, #T_StuNum ; point to student number lookup table
008F 7404       147            mov a, #04 ; Load second input into accumulator
0091 93         147            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0092 F593       147            mov HEX2, a ; Display number to given (first input) register
0094 900003     147            mov dptr, #T_StuNum ; point to student number lookup table
0097 7405       147            mov a, #05 ; Load second input into accumulator
0099 93         147            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
009A F594       147            mov HEX3, a ; Display number to given (first input) register
009C 900003     147            mov dptr, #T_StuNum ; point to student number lookup table
009F 7406       147            mov a, #06 ; Load second input into accumulator
00A1 93         147            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00A2 F58E       147            mov HEX4, a ; Display number to given (first input) register
00A4 900003     147            mov dptr, #T_StuNum ; point to student number lookup table
00A7 7407       147            mov a, #07 ; Load second input into accumulator
00A9 93         147            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00AA F58F       147            mov HEX5, a ; Display number to given (first input) register ; display first 6 digits
00AC            148            
00AC 020254     149            ljmp ENDLATCH   
00AF B80143     150   MODE1:   CJNE r0, #01, MODE2             ; jump if A != byte 
00B2            151            ; Mode 1
00B2 900003     152            mov dptr, #T_StuNum ; point to student number lookup table
00B5 7408       152            mov a, #08 ; Load second input into accumulator
00B7 93         152            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00B8 F591       152            mov HEX0, a ; Display number to given (first input) register
00BA 900003     152            mov dptr, #T_StuNum ; point to student number lookup table
00BD 7408       152            mov a, #08 ; Load second input into accumulator
00BF 93         152            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00C0 F592       152            mov HEX1, a ; Display number to given (first input) register
00C2 900003     152            mov dptr, #T_StuNum ; point to student number lookup table
00C5 7408       152            mov a, #08 ; Load second input into accumulator
00C7 93         152            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00C8 F593       152            mov HEX2, a ; Display number to given (first input) register
00CA 900003     152            mov dptr, #T_StuNum ; point to student number lookup table
00CD 7408       152            mov a, #08 ; Load second input into accumulator
00CF 93         152            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00D0 F594       152            mov HEX3, a ; Display number to given (first input) register
00D2 900003     152            mov dptr, #T_StuNum ; point to student number lookup table
00D5 7408       152            mov a, #08 ; Load second input into accumulator
00D7 93         152            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00D8 F58E       152            mov HEX4, a ; Display number to given (first input) register
00DA 900003     152            mov dptr, #T_StuNum ; point to student number lookup table
00DD 7408       152            mov a, #08 ; Load second input into accumulator
00DF 93         152            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00E0 F58F       152            mov HEX5, a ; Display number to given (first input) register
00E2 900003     153            mov dptr, #T_StuNum ; point to student number lookup table
00E5 7400       153            mov a, #00 ; Load second input into accumulator
00E7 93         153            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00E8 F591       153            mov HEX0, a ; Display number to given (first input) register
00EA 900003     154            mov dptr, #T_StuNum ; point to student number lookup table
00ED 7401       154            mov a, #01 ; Load second input into accumulator
00EF 93         154            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00F0 F592       154            mov HEX1, a ; Display number to given (first input) register
00F2            155                    
00F2 020254     156            ljmp ENDLATCH
00F5 B80241     157   MODE2:   CJNE r0, #02, MODE3             ; jump if A != byte 
00F8            158            ; Mode 2
00F8 900003     159            mov dptr, #T_StuNum ; point to student number lookup table
00FB 7400       159            mov a, #00 ; Load second input into accumulator
00FD 93         159            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00FE FC         159            mov r4, a ; Display number to given (first input) register
00FF 900003     159            mov dptr, #T_StuNum ; point to student number lookup table
0102 7401       159            mov a, #01 ; Load second input into accumulator
0104 93         159            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0105 FD         159            mov r5, a ; Display number to given (first input) register
0106 900003     159            mov dptr, #T_StuNum ; point to student number lookup table
0109 7402       159            mov a, #02 ; Load second input into accumulator
010B 93         159            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
010C F591       159            mov HEX0, a ; Display number to given (first input) register
010E 900003     159            mov dptr, #T_StuNum ; point to student number lookup table
0111 7403       159            mov a, #03 ; Load second input into accumulator
0113 93         159            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0114 F592       159            mov HEX1, a ; Display number to given (first input) register
0116 900003     159            mov dptr, #T_StuNum ; point to student number lookup table
0119 7404       159            mov a, #04 ; Load second input into accumulator
011B 93         159            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
011C F593       159            mov HEX2, a ; Display number to given (first input) register
011E 900003     159            mov dptr, #T_StuNum ; point to student number lookup table
0121 7405       159            mov a, #05 ; Load second input into accumulator
0123 93         159            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0124 F594       159            mov HEX3, a ; Display number to given (first input) register
0126 900003     159            mov dptr, #T_StuNum ; point to student number lookup table
0129 7406       159            mov a, #06 ; Load second input into accumulator
012B 93         159            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
012C F58E       159            mov HEX4, a ; Display number to given (first input) register
012E 900003     159            mov dptr, #T_StuNum ; point to student number lookup table
0131 7407       159            mov a, #07 ; Load second input into accumulator
0133 93         159            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0134 F58F       159            mov HEX5, a ; Display number to given (first input) register ; display first 6 digits
0136 020254     160            ljmp ENDLATCH
0139 B80341     161   MODE3:   CJNE r0, #03, MODE4             ; jump if A != byte 
013C            162            ; Mode 3
013C 900003     163            mov dptr, #T_StuNum ; point to student number lookup table
013F 7400       163            mov a, #00 ; Load second input into accumulator
0141 93         163            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0142 FC         163            mov r4, a ; Display number to given (first input) register
0143 900003     163            mov dptr, #T_StuNum ; point to student number lookup table
0146 7401       163            mov a, #01 ; Load second input into accumulator
0148 93         163            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0149 FD         163            mov r5, a ; Display number to given (first input) register
014A 900003     163            mov dptr, #T_StuNum ; point to student number lookup table
014D 7402       163            mov a, #02 ; Load second input into accumulator
014F 93         163            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0150 F591       163            mov HEX0, a ; Display number to given (first input) register
0152 900003     163            mov dptr, #T_StuNum ; point to student number lookup table
0155 7403       163            mov a, #03 ; Load second input into accumulator
0157 93         163            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0158 F592       163            mov HEX1, a ; Display number to given (first input) register
015A 900003     163            mov dptr, #T_StuNum ; point to student number lookup table
015D 7404       163            mov a, #04 ; Load second input into accumulator
015F 93         163            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0160 F593       163            mov HEX2, a ; Display number to given (first input) register
0162 900003     163            mov dptr, #T_StuNum ; point to student number lookup table
0165 7405       163            mov a, #05 ; Load second input into accumulator
0167 93         163            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0168 F594       163            mov HEX3, a ; Display number to given (first input) register
016A 900003     163            mov dptr, #T_StuNum ; point to student number lookup table
016D 7406       163            mov a, #06 ; Load second input into accumulator
016F 93         163            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0170 F58E       163            mov HEX4, a ; Display number to given (first input) register
0172 900003     163            mov dptr, #T_StuNum ; point to student number lookup table
0175 7407       163            mov a, #07 ; Load second input into accumulator
0177 93         163            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0178 F58F       163            mov HEX5, a ; Display number to given (first input) register ; display first 6 digits
017A 020254     164            ljmp ENDLATCH
017D B80435     165   MODE4:   CJNE r0, #04, MODE5             ; jump if A != byte 
0180            166            ; Mode 4
0180 900003     167            mov dptr, #T_StuNum ; point to student number lookup table
0183 7400       167            mov a, #00 ; Load second input into accumulator
0185 93         167            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0186 F591       167            mov HEX0, a ; Display number to given (first input) register
0188 900003     167            mov dptr, #T_StuNum ; point to student number lookup table
018B 7401       167            mov a, #01 ; Load second input into accumulator
018D 93         167            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
018E F592       167            mov HEX1, a ; Display number to given (first input) register
0190 900003     167            mov dptr, #T_StuNum ; point to student number lookup table
0193 7402       167            mov a, #02 ; Load second input into accumulator
0195 93         167            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0196 F593       167            mov HEX2, a ; Display number to given (first input) register
0198 900003     167            mov dptr, #T_StuNum ; point to student number lookup table
019B 7403       167            mov a, #03 ; Load second input into accumulator
019D 93         167            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
019E F594       167            mov HEX3, a ; Display number to given (first input) register
01A0 900003     167            mov dptr, #T_StuNum ; point to student number lookup table
01A3 7404       167            mov a, #04 ; Load second input into accumulator
01A5 93         167            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01A6 F58E       167            mov HEX4, a ; Display number to given (first input) register
01A8 900003     167            mov dptr, #T_StuNum ; point to student number lookup table
01AB 7405       167            mov a, #05 ; Load second input into accumulator
01AD 93         167            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01AE F58F       167            mov HEX5, a ; Display number to given (first input) register ; display last 6 digits
01B0 7C00       168            mov r4, #00
01B2 020254     169            ljmp ENDLATCH
01B5 B80533     170   MODE5:   CJNE r0, #05, MODE6             ; jump if A != byte 
01B8            171            ; Mode 5
01B8 900003     172            mov dptr, #T_StuNum ; point to student number lookup table
01BB 7408       172            mov a, #08 ; Load second input into accumulator
01BD 93         172            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01BE F591       172            mov HEX0, a ; Display number to given (first input) register
01C0 900003     172            mov dptr, #T_StuNum ; point to student number lookup table
01C3 7408       172            mov a, #08 ; Load second input into accumulator
01C5 93         172            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01C6 F592       172            mov HEX1, a ; Display number to given (first input) register
01C8 900003     172            mov dptr, #T_StuNum ; point to student number lookup table
01CB 7408       172            mov a, #08 ; Load second input into accumulator
01CD 93         172            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01CE F593       172            mov HEX2, a ; Display number to given (first input) register
01D0 900003     172            mov dptr, #T_StuNum ; point to student number lookup table
01D3 7408       172            mov a, #08 ; Load second input into accumulator
01D5 93         172            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01D6 F594       172            mov HEX3, a ; Display number to given (first input) register
01D8 900003     172            mov dptr, #T_StuNum ; point to student number lookup table
01DB 7408       172            mov a, #08 ; Load second input into accumulator
01DD 93         172            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01DE F58E       172            mov HEX4, a ; Display number to given (first input) register
01E0 900003     172            mov dptr, #T_StuNum ; point to student number lookup table
01E3 7408       172            mov a, #08 ; Load second input into accumulator
01E5 93         172            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01E6 F58F       172            mov HEX5, a ; Display number to given (first input) register
01E8            173            
01E8 020254     174            ljmp ENDLATCH
01EB B80633     175   MODE6:   CJNE r0, #06, MODE7             ; jump if A != byte 
01EE            176            ; Mode 6
01EE 900003     177            mov dptr, #T_StuNum ; point to student number lookup table
01F1 7408       177            mov a, #08H ; Load second input into accumulator
01F3 93         177            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01F4 F591       177            mov HEX0, a ; Display number to given (first input) register
01F6 900003     177            mov dptr, #T_StuNum ; point to student number lookup table
01F9 740C       177            mov a, #0CH ; Load second input into accumulator
01FB 93         177            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01FC F592       177            mov HEX1, a ; Display number to given (first input) register
01FE 900003     177            mov dptr, #T_StuNum ; point to student number lookup table
0201 740B       177            mov a, #0BH ; Load second input into accumulator
0203 93         177            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0204 F593       177            mov HEX2, a ; Display number to given (first input) register
0206 900003     177            mov dptr, #T_StuNum ; point to student number lookup table
0209 740B       177            mov a, #0BH ; Load second input into accumulator
020B 93         177            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
020C F594       177            mov HEX3, a ; Display number to given (first input) register
020E 900003     177            mov dptr, #T_StuNum ; point to student number lookup table
0211 740A       177            mov a, #0AH ; Load second input into accumulator
0213 93         177            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0214 F58E       177            mov HEX4, a ; Display number to given (first input) register
0216 900003     177            mov dptr, #T_StuNum ; point to student number lookup table
0219 7409       177            mov a, #09H ; Load second input into accumulator
021B 93         177            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
021C F58F       177            mov HEX5, a ; Display number to given (first input) register
021E            178            
021E 020254     179            ljmp ENDLATCH
0221            180   MODE7:   ; this should be the "else" case
0221            181            ; Mode 7
0221            182            ; remove 03 and 06
0221 900003     182            mov dptr, #T_StuNum ; point to student number lookup table
0224 7400       182            mov a, #00 ; Load second input into accumulator
0226 93         182            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0227 F591       182            mov HEX0, a ; Display number to given (first input) register
0229 900003     182            mov dptr, #T_StuNum ; point to student number lookup table
022C 7401       182            mov a, #01 ; Load second input into accumulator
022E 93         182            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
022F F592       182            mov HEX1, a ; Display number to given (first input) register
0231 900003     182            mov dptr, #T_StuNum ; point to student number lookup table
0234 7402       182            mov a, #02 ; Load second input into accumulator
0236 93         182            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0237 F593       182            mov HEX2, a ; Display number to given (first input) register
0239 900003     182            mov dptr, #T_StuNum ; point to student number lookup table
023C 7404       182            mov a, #04 ; Load second input into accumulator
023E 93         182            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
023F F594       182            mov HEX3, a ; Display number to given (first input) register
0241 900003     182            mov dptr, #T_StuNum ; point to student number lookup table
0244 7405       182            mov a, #05 ; Load second input into accumulator
0246 93         182            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0247 F58E       182            mov HEX4, a ; Display number to given (first input) register
0249 900003     182            mov dptr, #T_StuNum ; point to student number lookup table
024C 7407       182            mov a, #07 ; Load second input into accumulator
024E 93         182            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
024F F58F       182            mov HEX5, a ; Display number to given (first input) register
0251            183            
0251 020254     184            ljmp ENDLATCH   
0254            185   ENDLATCH: 
0254            186   
0254            187   ; The code under this label has to do with timekeeping
0254            188   TIMELOGIC:       
0254            189            ; Timing logic
0254 D90D       190            djnz r1, ENDTICK
0256 7964       191            mov r1, S_TICKS         ; if we got here, that means r1 is zero
0258 DA09       192            djnz r2, ENDTICK
025A 7A64       193            mov r2, M_TICKS         ; if we got here, that means r2 is zero
025C DB05       194            djnz r3, ENDTICK
025E 7B96       195            mov r3, L_TICKS         ; if we got here, that means r3 is zero
0260 020266     196            ljmp HEARTBEAT
0263            197            
0263            198            ENDTICK:
0263 020320     199            ljmp ENDTIME
0266            200            
0266            201   
0266            202            ; these lines execute once a "heartbeat"
0266            203   HEARTBEAT:
0266 B2E8       204            cpl LEDRA.0             ;flip LED to visualize heartbeat
0268            205            
0268            206            ; Think of this as a big Switch statement that finds what mode we are in
0268            207            ; Modes that have time-dependant behavior: 2, 3, 4, 5, 6
0268 B8021B     208            CJNE r0, #02, MODE3T            ; jump if r0 != byte
026B            209            ; Mode 2
026B 8DF0       210            mov b, r5 ; "temp" keep
026D            210            
026D EC         210            mov a, r4
026E FD         210            mov r5, a
026F AC8F       210            mov r4, HEX5
0271 858E8F     210            mov HEX5, HEX4
0274 85948E     210            mov HEX4, HEX3
0277 859394     210            mov HEX3, HEX2
027A 859293     210            mov HEX2, HEX1
027D 859192     210            mov HEX1, HEX0
0280 85F091     210            mov HEX0, b
0283 020320     211            ljmp ENDTIME    
0286 B8031B     212   MODE3T:  CJNE r0, #03, MODE4T            ; jump if r0 != byte 
0289            213            ; Mode 3
0289 8591F0     214            mov b, HEX0 ; "temp" keep
028C            214            
028C 859291     214            mov HEX0, HEX1
028F 859392     214            mov HEX1, HEX2
0292 859493     214            mov HEX2, HEX3
0295 858E94     214            mov HEX3, HEX4
0298 858F8E     214            mov HEX4, HEX5
029B 8C8F       214            mov HEX5, r4
029D ED         214            mov a, r5
029E FC         214            mov r4, a
029F ADF0       214            mov r5, b
02A1            215                    
02A1 020320     216            ljmp ENDTIME
02A4 B8046D     217   MODE4T:  CJNE r0, #04, MODE5T            ; jump if A != byte 
02A7            218            ; Mode 4 - Flash
02A7            219            ; if r4 == 0, blank
02A7 BC0035     220            CJNE r4, #00, FLASHJUMP
02AA 900003     221            mov dptr, #T_StuNum ; point to student number lookup table
02AD 7408       221            mov a, #08 ; Load second input into accumulator
02AF 93         221            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
02B0 F591       221            mov HEX0, a ; Display number to given (first input) register
02B2 900003     221            mov dptr, #T_StuNum ; point to student number lookup table
02B5 7408       221            mov a, #08 ; Load second input into accumulator
02B7 93         221            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
02B8 F592       221            mov HEX1, a ; Display number to given (first input) register
02BA 900003     221            mov dptr, #T_StuNum ; point to student number lookup table
02BD 7408       221            mov a, #08 ; Load second input into accumulator
02BF 93         221            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
02C0 F593       221            mov HEX2, a ; Display number to given (first input) register
02C2 900003     221            mov dptr, #T_StuNum ; point to student number lookup table
02C5 7408       221            mov a, #08 ; Load second input into accumulator
02C7 93         221            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
02C8 F594       221            mov HEX3, a ; Display number to given (first input) register
02CA 900003     221            mov dptr, #T_StuNum ; point to student number lookup table
02CD 7408       221            mov a, #08 ; Load second input into accumulator
02CF 93         221            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
02D0 F58E       221            mov HEX4, a ; Display number to given (first input) register
02D2 900003     221            mov dptr, #T_StuNum ; point to student number lookup table
02D5 7408       221            mov a, #08 ; Load second input into accumulator
02D7 93         221            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
02D8 F58F       221            mov HEX5, a ; Display number to given (first input) register
02DA 7C01       222            mov r4, #01
02DC 020320     223            ljmp ENDTIME
02DF            224            FLASHJUMP:      
02DF 900003     225            mov dptr, #T_StuNum ; point to student number lookup table
02E2 7400       225            mov a, #00 ; Load second input into accumulator
02E4 93         225            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
02E5 F591       225            mov HEX0, a ; Display number to given (first input) register
02E7 900003     225            mov dptr, #T_StuNum ; point to student number lookup table
02EA 7401       225            mov a, #01 ; Load second input into accumulator
02EC 93         225            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
02ED F592       225            mov HEX1, a ; Display number to given (first input) register
02EF 900003     225            mov dptr, #T_StuNum ; point to student number lookup table
02F2 7402       225            mov a, #02 ; Load second input into accumulator
02F4 93         225            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
02F5 F593       225            mov HEX2, a ; Display number to given (first input) register
02F7 900003     225            mov dptr, #T_StuNum ; point to student number lookup table
02FA 7403       225            mov a, #03 ; Load second input into accumulator
02FC 93         225            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
02FD F594       225            mov HEX3, a ; Display number to given (first input) register
02FF 900003     225            mov dptr, #T_StuNum ; point to student number lookup table
0302 7404       225            mov a, #04 ; Load second input into accumulator
0304 93         225            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0305 F58E       225            mov HEX4, a ; Display number to given (first input) register
0307 900003     225            mov dptr, #T_StuNum ; point to student number lookup table
030A 7405       225            mov a, #05 ; Load second input into accumulator
030C 93         225            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
030D F58F       225            mov HEX5, a ; Display number to given (first input) register
030F 7C00       226            mov r4, #00
0311 020320     227            ljmp ENDTIME
0314 B80503     228   MODE5T:  CJNE r0, #05, MODE6T            ; jump if A != byte 
0317            229            ; Mode 5 - One by one
0317            230   
0317 020320     231            ljmp ENDTIME
031A B80603     232   MODE6T:  CJNE r0, #06, ENDTIME           ; jump if A != byte 
031D            233            ; Mode 6 - Hello() Most_sig() CPN312()
031D            234   
031D 020320     235            ljmp ENDTIME
0320            236            
0320            237   ENDTIME:
0320            238   
0320 02005D     239            ljmp loop ; Go back up to loop to keep repeating forever
0323            240   END
