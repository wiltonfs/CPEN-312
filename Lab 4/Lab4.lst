                 -1   $MODDE0CV ; Special Function Registers declaration for CV-8052
0000              1   ;  MODDDE2: Register definition for DE2-8052 softcore
0000              2   ;
0000              3   ;   Copyright (C) 2011  Jesus Calvino-Fraga, jesusc at ece.ubc.ca
0000              4   ;
0000              5   ;   This library is free software; you can redistribute it and/or
0000              6   ;   modify it under the terms of the GNU Lesser General Public
0000              7   ;   License as published by the Free Software Foundation; either
0000              8   ;   version 2.1 of the License, or (at your option) any later version.
0000              9   ;
0000             10   ;   This library is distributed in the hope that it will be useful,
0000             11   ;   but WITHOUT ANY WARRANTY; without even the implied warranty of
0000             12   ;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
0000             13   ;   Lesser General Public License for more details.
0000             14   ;
0000             15   ;   You should have received a copy of the GNU Lesser General Public
0000             16   ;   License along with this library; if not, write to the Free Software
0000             17   ;   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
0000             18   ;
0000             19       
0000             20   P0     DATA  080H  ;PORT 0
0000             21   SP     DATA  081H  ;STACK POINTER
0000             22   DPL    DATA  082H  ;DATA POINTER 0 - LOW BYTE
0000             23   DPH    DATA  083H  ;DATA POINTER 0 - HIGH BYTE
0000             24   DPL1   DATA  084H  ;DATA POINTER 1 - LOW BYTE
0000             25   DPH1   DATA  085H  ;DATA POINTER 1 - HIGH BYTE
0000             26   DPS    DATA  086H  ;DATA POINTER SELECT. DPH1, DPL1 active when DPS.0=1
0000             27   PCON   DATA  087H  ;POWER CONTROL
0000             28   TCON   DATA  088H  ;TIMER CONTROL
0000             29   TMOD   DATA  089H  ;TIMER MODE
0000             30   TL0    DATA  08AH  ;TIMER 0 - LOW BYTE
0000             31   TL1    DATA  08BH  ;TIMER 1 - LOW BYTE
0000             32   TH0    DATA  08CH  ;TIMER 0 - HIGH BYTE
0000             33   TH1    DATA  08DH  ;TIMER 1 - HIGH BYTE
0000             34   P1     DATA  090H  ;PORT 1
0000             35   SCON   DATA  098H  ;SERIAL PORT CONTROL
0000             36   SBUF   DATA  099H  ;SERIAL PORT BUFFER
0000             37   P2     DATA  0A0H  ;PORT 2
0000             38   IE     DATA  0A8H  ;INTERRUPT ENABLE
0000             39   P3     DATA  0B0H  ;PORT 3
0000             40   IP     DATA  0B8H  ;INTERRUPT PRIORITY
0000             41   T2CON  DATA  0C8H  ;TIMER 2 CONTROL
0000             42   T2MOD  DATA  0C9H  ;TIMER 2 MODE
0000             43   RCAP2L DATA  0CAH  ;TIMER 2 CAPTURE REGISTER - LOW BYTE
0000             44   RCAP2H DATA  0CBH  ;TIMER 2 CAPTURE REGISTER - HIGH BYTE
0000             45   TL2    DATA  0CCH  ;TIMER 2 - LOW BYTE
0000             46   TH2    DATA  0CDH  ;TIMER 2 - HIGH BYTE
0000             47   PSW    DATA  0D0H  ;PROGRAM STATUS WORD
0000             48   ACC    DATA  0E0H  ;ACCUMULATOR
0000             49   B      DATA  0F0H  ;MULTIPLICATION REGISTER
0000             50   IT0    BIT   088H  ;TCON.0 - EXT. INTERRUPT 0 TYPE
0000             51   IE0    BIT   089H  ;TCON.1 - EXT. INTERRUPT 0 EDGE FLAG
0000             52   IT1    BIT   08AH  ;TCON.2 - EXT. INTERRUPT 1 TYPE
0000             53   IE1    BIT   08BH  ;TCON.3 - EXT. INTERRUPT 1 EDGE FLAG
0000             54   TR0    BIT   08CH  ;TCON.4 - TIMER 0 ON/OFF CONTROL
0000             55   TF0    BIT   08DH  ;TCON.5 - TIMER 0 OVERFLOW FLAG
0000             56   TR1    BIT   08EH  ;TCON.6 - TIMER 1 ON/OFF CONTROL
0000             57   TF1    BIT   08FH  ;TCON.7 - TIMER 1 OVERFLOW FLAG
0000             58   RI     BIT   098H  ;SCON.0 - RECEIVE INTERRUPT FLAG
0000             59   TI     BIT   099H  ;SCON.1 - TRANSMIT INTERRUPT FLAG
0000             60   RB8    BIT   09AH  ;SCON.2 - RECEIVE BIT 8
0000             61   TB8    BIT   09BH  ;SCON.3 - TRANSMIT BIT 8
0000             62   REN    BIT   09CH  ;SCON.4 - RECEIVE ENABLE
0000             63   SM2    BIT   09DH  ;SCON.5 - SERIAL MODE CONTROL BIT 2
0000             64   SM1    BIT   09EH  ;SCON.6 - SERIAL MODE CONTROL BIT 1
0000             65   SM0    BIT   09FH  ;SCON.7 - SERIAL MODE CONTROL BIT 0
0000             66   EX0    BIT   0A8H  ;IE.0 - EXTERNAL INTERRUPT 0 ENABLE
0000             67   ET0    BIT   0A9H  ;IE.1 - TIMER 0 INTERRUPT ENABLE
0000             68   EX1    BIT   0AAH  ;IE.2 - EXTERNAL INTERRUPT 1 ENABLE
0000             69   ET1    BIT   0ABH  ;IE.3 - TIMER 1 INTERRUPT ENABLE
0000             70   ES     BIT   0ACH  ;IE.4 - SERIAL PORT INTERRUPT ENABLE
0000             71   ET2    BIT   0ADH  ;IE.5 - TIMER 2 INTERRUPT ENABLE
0000             72   EA     BIT   0AFH  ;IE.7 - GLOBAL INTERRUPT ENABLE
0000             73   RXD    BIT   0B0H  ;P3.0 - SERIAL PORT RECEIVE INPUT
0000             74   TXD    BIT   0B1H  ;P3.1 - SERIAL PORT TRANSMIT OUTPUT
0000             75   INT0   BIT   0B2H  ;P3.2 - EXTERNAL INTERRUPT 0 INPUT
0000             76   INT1   BIT   0B3H  ;P3.3 - EXTERNAL INTERRUPT 1 INPUT
0000             77   T0     BIT   0B4H  ;P3.4 - TIMER 0 COUNT INPUT
0000             78   T1     BIT   0B5H  ;P3.5 - TIMER 1 COUNT INPUT
0000             79   WR     BIT   0B6H  ;P3.6 - WRITE CONTROL FOR EXT. MEMORY
0000             80   RD     BIT   0B7H  ;P3.7 - READ CONTROL FOR EXT. MEMORY
0000             81   PX0    BIT   0B8H  ;IP.0 - EXTERNAL INTERRUPT 0 PRIORITY
0000             82   PT0    BIT   0B9H  ;IP.1 - TIMER 0 PRIORITY
0000             83   PX1    BIT   0BAH  ;IP.2 - EXTERNAL INTERRUPT 1 PRIORITY
0000             84   PT1    BIT   0BBH  ;IP.3 - TIMER 1 PRIORITY
0000             85   PS     BIT   0BCH  ;IP.4 - SERIAL PORT PRIORITY
0000             86   PT2    BIT   0BDH  ;IP.5 - TIMER 2 PRIORITY
0000             87   CAP2   BIT   0C8H  ;T2CON.0 - CAPTURE OR RELOAD SELECT
0000             88   CNT2   BIT   0C9H  ;T2CON.1 - TIMER OR COUNTER SELECT
0000             89   TR2    BIT   0CAH  ;T2CON.2 - TIMER 2 ON/OFF CONTROL
0000             90   EXEN2  BIT   0CBH  ;T2CON.3 - TIMER 2 EXTERNAL ENABLE FLAG
0000             91   TCLK   BIT   0CCH  ;T2CON.4 - TRANSMIT CLOCK SELECT
0000             92   RCLK   BIT   0CDH  ;T2CON.5 - RECEIVE CLOCK SELECTT
0000             93   EXF2   BIT   0CEH  ;T2CON.6 - EXTERNAL TRANSITION FLAG
0000             94   TF2    BIT   0CFH  ;T2CON.7 - TIMER 2 OVERFLOW FLAG
0000             95   P      BIT   0D0H  ;PSW.0 - ACCUMULATOR PARITY FLAG
0000             96   OV     BIT   0D2H  ;PSW.2 - OVERFLOW FLAG
0000             97   RS0    BIT   0D3H  ;PSW.3 - REGISTER BANK SELECT 0
0000             98   RS1    BIT   0D4H  ;PSW.4 - REGISTER BANK SELECT 1
0000             99   F0     BIT   0D5H  ;PSW.5 - FLAG 0
0000            100   AC     BIT   0D6H  ;PSW.6 - AUXILIARY CARRY FLAG
0000            101   CY     BIT   0D7H  ;PSW.7 - CARRY FLAG
0000            102   
0000            103   ; For the altera DE2 configured with an 8051/8052 softcore processor
0000            104   ; we have the following extra registers:
0000            105   
0000            106   HEX0   DATA  091H ; Zero turns the segment on
0000            107   HEX1   DATA  092H ; 
0000            108   HEX2   DATA  093H ; 
0000            109   HEX3   DATA  094H ; 
0000            110   HEX4   DATA  08EH ;
0000            111   HEX5   DATA  08FH ;
0000            112   HEX6   DATA  096H ;
0000            113   HEX7   DATA  097H ;
0000            114   
0000            115   P0MOD  DATA  09AH ; Input/output mode bits for port 0.  '1' sets the port to output mode.
0000            116   P1MOD  DATA  09BH ; Input/output mode bits for port 1
0000            117   P2MOD  DATA  09CH ; Input/output mode bits for port 2
0000            118   P3MOD  DATA  09DH ; Input/output mode bits for port 3
0000            119   
0000            120   LEDRA  DATA  0E8H ; LEDs LEDR0 to LEDR7 (bit addressable, ex: LEDRA.1 for LEDR1)
0000            121   LEDRB  DATA  095H ; LEDs LEDR8 to LEDR15
0000            122   LEDRC  DATA  09EH ; LEDs LEDR16, LEDR15, and LEDG8
0000            123   LEDG   DATA  0F8H ; LEDs LEDG0 to LEDG7 (bit addressable, ex: LEDG.3 for LEDG3)
0000            124   SWA    DATA  0E8H ; Switches SW0 to SW7 (bit addressable, ex: SWA.1 for SW1)
0000            125   SWB    DATA  095H ; Switches SW8 to SW15
0000            126   SWC    DATA  09EH ; Switches SW16 and SW17
0000            127   KEY    DATA  0F8H ; KEY1=KEY.1, KEY2=KEY.2, KEY3=KEY.3.  KEY0 is the reset button! 
0000            128   
0000            129   LCD_CMD   DATA 0D8H ;
0000            130   LCD_DATA  DATA 0D9H ;
0000            131   LCD_MOD   DATA 0DAH ; Write 0xff to make LCD_DATA an output
0000            132   LCD_RW    BIT  0D8H ; '0' writes to LCD
0000            133   LCD_EN    BIT  0D9H ; Toggle from '1' to '0'
0000            134   LCD_RS    BIT  0DAH ; '0' for commands, '1' for data
0000            135   LCD_ON    BIT  0DBH ; Write '1' to power the LCD
0000            136   LCD_BLON  BIT  0DCH ; Write '1' to turn on back light
0000            137   
0000            138   FLASH_CMD  data 0DBH ; The control bits of the flash memory:
0000            139   ; bit 0: FL_RST_N  Set to 1 for normal operation
0000            140   ; bit 1: FL_WE_N
0000            141   ; bit 2: FL_OE_N
0000            142   ; bit 3: FL_CE_N
0000            143   FLASH_DATA data 0DCH ; 8-bit data bus of flash memory.
0000            144   FLASH_MOD  data 0DDH ; 0xff makes FLASH_DATA output.  0x00 makes FLASH_DATA input.
0000            145   FLASH_ADD0 data 0E1H ; address bits 0 to 7.
0000            146   FLASH_ADD1 data 0E2H ; address bits 8 to 15.
0000            147   FLASH_ADD2 data 0E3H ; address bits 16 to 21.
0000            148   
0000              2   
0000              3   org 0000H ; Which code memory location to start at after reset
0000 020010       4            ljmp pgrmstart  ; jump down to the label called "pgrmstart"
0003              5   
0003              6   ;These three values are associated with the timing of the circuit
0003              7   ;Tune them to set the "heartbeat" of the program
0003              8   ;The time between "heartbeats" is a function of product of these three
0003              9   ;But none of them can be over 255 (8 bit)
0003             10   S_TICKS EQU #100
0003             11   M_TICKS EQU #100
0003             12   L_TICKS EQU #150
0003             13   
0003             14   ; Look-up table for my student number, blank, and HELLO
0003             15   ; My student num: 48059760
0003             16   T_StuNum:
0003             17            ;       0       6         7        9    5        0        8        4    
0003 40027810    18            DB 40H, 02H, 78H, 10H, 12H, 40H, 00H, 19H
     12400019
000B             19            ; BLANK
000B 7F          20            DB 7FH
000C             21            ;   H    E        L        O
000C 8986C740    22            DB 89H, 86H, 0xC7H, 40H
0010             23   
0010             24   ;This is a "function", it takes two parameters. These parameters can be accessed using %0 and %1
                 25   Display_on mac
                 26   	mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
                 27   	
                 28   	mov dptr, #T_StuNum ; point to student number lookup table
                 29   	mov a, %1 ; Load second input into accumulator
                 30   	movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
                 31   	
                 32   	mov %0, a ; Display number to given (first input) register
                 33   
                 34   	mov a, b ; Restore value of accumulator (just in case I was doing something important before)
                 35   endmac
0010             36   
0010             37   ;This is a "function", it takes no parameters. It just displays the first 6 digits of my student number
                 38   Most_sig mac
                 39   	Display_on(r4, #00)
                 40   	Display_on(r5, #01)
                 41   	Display_on(HEX0, #02)
                 42   	Display_on(HEX1, #03)
                 43   	Display_on(HEX2, #04)
                 44   	Display_on(HEX3, #05)
                 45   	Display_on(HEX4, #06)
                 46   	Display_on(HEX5, #07)
                 47   endmac
0010             48   
0010             49   ;This is a "function", it takes no parameters. It just displays all blank
                 50   All_blnk mac
                 51   	Display_on(HEX0, #08)
                 52   	Display_on(HEX1, #08)
                 53   	Display_on(HEX2, #08)
                 54   	Display_on(HEX3, #08)
                 55   	Display_on(HEX4, #08)
                 56   	Display_on(HEX5, #08)
                 57   endmac
0010             58   
0010             59   ;This is a "function", it takes no parameters. It just displays the last 6 digits of my student number
                 60   Least_sig mac
                 61   	Display_on(HEX0, #00)
                 62   	Display_on(HEX1, #01)
                 63   	Display_on(HEX2, #02)
                 64   	Display_on(HEX3, #03)
                 65   	Display_on(HEX4, #04)
                 66   	Display_on(HEX5, #05)
                 67   endmac
0010             68   
0010             69   ;This is a "function", it takes no parameters. It just displays HELLO
                 70   Hello mac
                 71   	Display_on(HEX0, #08H)
                 72   	Display_on(HEX1, #0CH)
                 73   	Display_on(HEX2, #0BH)
                 74   	Display_on(HEX3, #0BH)
                 75   	Display_on(HEX4, #0AH)
                 76   	Display_on(HEX5, #09H)
                 77   endmac
0010             78   
0010             79   ;This is a "function", it takes no parameters. It just displays the custom display for mode 7
                 80   Custom_disp mac
                 81   	; Up to you to implement
                 82   endmac
0010             83   
                 84   Scrll_left mac
                 85   	mov b, r5 ; "temp" keep
                 86   	
                 87   	mov a, r4
                 88   	mov r5, a
                 89   	mov r4, HEX5
                 90   	mov HEX5, HEX4
                 91   	mov HEX4, HEX3
                 92   	mov HEX3, HEX2
                 93   	mov HEX2, HEX1
                 94   	mov HEX1, HEX0
                 95   	mov HEX0, b
                 96   endmac
0010             97   
                 98   Scrll_right mac
                 99   	mov b, HEX0 ; "temp" keep
                100   	
                101   	mov HEX0, HEX1
                102   	mov HEX1, HEX2
                103   	mov HEX2, HEX3
                104   	mov HEX3, HEX4
                105   	mov HEX4, HEX5
                106   	mov HEX5, r4
                107   	mov a, r5
                108   	mov r4, a
                109   	mov r5, b
                110   endmac
0010            111   
0010            112   ; The code under this label runs once, when the program starts
0010            113   pgrmstart:
0010            114            ; Turns off LEDs and stuff
0010 75817F     115            mov SP, #0x7f
0013 75E800     116            mov LEDRA, #0 ; Bit addressable
0016 759500     117            mov LEDRB, #0 ; Not bit addressable
0019            118            
0019            119            ; Start timer
0019 7964       120            mov r1, S_TICKS
001B 7A64       121            mov r2, M_TICKS
001D 7B96       122            mov r3, L_TICKS
001F            123            
001F            124            ; Mode 0 by default, display first 6 digits
001F F5F0       125            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0021            125            
0021 900003     125            mov dptr, #T_StuNum ; point to student number lookup table
0024 7400       125            mov a, #00 ; Load second input into accumulator
0026 93         125            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0027            125            
0027 FC         125            mov r4, a ; Display number to given (first input) register
0028            125   
0028 E5F0       125            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
002A F5F0       125            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
002C            125            
002C 900003     125            mov dptr, #T_StuNum ; point to student number lookup table
002F 7401       125            mov a, #01 ; Load second input into accumulator
0031 93         125            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0032            125            
0032 FD         125            mov r5, a ; Display number to given (first input) register
0033            125   
0033 E5F0       125            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0035 F5F0       125            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0037            125            
0037 900003     125            mov dptr, #T_StuNum ; point to student number lookup table
003A 7402       125            mov a, #02 ; Load second input into accumulator
003C 93         125            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
003D            125            
003D F591       125            mov HEX0, a ; Display number to given (first input) register
003F            125   
003F E5F0       125            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0041 F5F0       125            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0043            125            
0043 900003     125            mov dptr, #T_StuNum ; point to student number lookup table
0046 7403       125            mov a, #03 ; Load second input into accumulator
0048 93         125            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0049            125            
0049 F592       125            mov HEX1, a ; Display number to given (first input) register
004B            125   
004B E5F0       125            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
004D F5F0       125            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
004F            125            
004F 900003     125            mov dptr, #T_StuNum ; point to student number lookup table
0052 7404       125            mov a, #04 ; Load second input into accumulator
0054 93         125            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0055            125            
0055 F593       125            mov HEX2, a ; Display number to given (first input) register
0057            125   
0057 E5F0       125            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0059 F5F0       125            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
005B            125            
005B 900003     125            mov dptr, #T_StuNum ; point to student number lookup table
005E 7405       125            mov a, #05 ; Load second input into accumulator
0060 93         125            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0061            125            
0061 F594       125            mov HEX3, a ; Display number to given (first input) register
0063            125   
0063 E5F0       125            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0065 F5F0       125            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0067            125            
0067 900003     125            mov dptr, #T_StuNum ; point to student number lookup table
006A 7406       125            mov a, #06 ; Load second input into accumulator
006C 93         125            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
006D            125            
006D F58E       125            mov HEX4, a ; Display number to given (first input) register
006F            125   
006F E5F0       125            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0071 F5F0       125            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0073            125            
0073 900003     125            mov dptr, #T_StuNum ; point to student number lookup table
0076 7407       125            mov a, #07 ; Load second input into accumulator
0078 93         125            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0079            125            
0079 F58F       125            mov HEX5, a ; Display number to given (first input) register
007B            125   
007B E5F0       125            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
007D            126            
007D            127   ; The code under this label runs continuously
007D            128   loop:
007D            129            ; Latching logic
007D 20FB03     130            jb key.3, ENDLATCHtmp   ; jump if bit 3 of switch is = 1
0080 020086     131            ljmp LATCHLOGIC
0083 02030A     132   ENDLATCHtmp: ljmp ENDLATCH       ; I have to do this weird jumping bc jb can only jump up to 127 lines
0086            133   
0086            134   ; The code under this label has to do with latching our mode, and updating the display
0086            135   ; to the "first frame" of that mode
0086            136   LATCHLOGIC:
0086            137            ; Evaluate initial display depending on mode
0086 E5E8       138            mov a, SWA                                                      
0088 5407       139            ANL a, #07                              ; strip A to only the least significant 3 values by ANDing it with 00000111 (Not strictly nesc.)
008A F8         140            mov r0, a                               ; store switch values in r0
008B            141            ; Think of this as a big Switch statement that finds what mode we are in
008B            142            ; There is a better way to do this, as a lot of the modes have the same start
008B            143            ; However, to start with this is a more clear way to see what is going on
008B B80061     144            CJNE r0, #00, MODE1             ; jump if r0 != byte
008E            145            ; Mode 0
008E F5F0       146            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0090            146            
0090 900003     146            mov dptr, #T_StuNum ; point to student number lookup table
0093 7400       146            mov a, #00 ; Load second input into accumulator
0095 93         146            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0096            146            
0096 FC         146            mov r4, a ; Display number to given (first input) register
0097            146   
0097 E5F0       146            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0099 F5F0       146            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
009B            146            
009B 900003     146            mov dptr, #T_StuNum ; point to student number lookup table
009E 7401       146            mov a, #01 ; Load second input into accumulator
00A0 93         146            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00A1            146            
00A1 FD         146            mov r5, a ; Display number to given (first input) register
00A2            146   
00A2 E5F0       146            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
00A4 F5F0       146            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
00A6            146            
00A6 900003     146            mov dptr, #T_StuNum ; point to student number lookup table
00A9 7402       146            mov a, #02 ; Load second input into accumulator
00AB 93         146            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00AC            146            
00AC F591       146            mov HEX0, a ; Display number to given (first input) register
00AE            146   
00AE E5F0       146            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
00B0 F5F0       146            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
00B2            146            
00B2 900003     146            mov dptr, #T_StuNum ; point to student number lookup table
00B5 7403       146            mov a, #03 ; Load second input into accumulator
00B7 93         146            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00B8            146            
00B8 F592       146            mov HEX1, a ; Display number to given (first input) register
00BA            146   
00BA E5F0       146            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
00BC F5F0       146            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
00BE            146            
00BE 900003     146            mov dptr, #T_StuNum ; point to student number lookup table
00C1 7404       146            mov a, #04 ; Load second input into accumulator
00C3 93         146            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00C4            146            
00C4 F593       146            mov HEX2, a ; Display number to given (first input) register
00C6            146   
00C6 E5F0       146            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
00C8 F5F0       146            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
00CA            146            
00CA 900003     146            mov dptr, #T_StuNum ; point to student number lookup table
00CD 7405       146            mov a, #05 ; Load second input into accumulator
00CF 93         146            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00D0            146            
00D0 F594       146            mov HEX3, a ; Display number to given (first input) register
00D2            146   
00D2 E5F0       146            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
00D4 F5F0       146            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
00D6            146            
00D6 900003     146            mov dptr, #T_StuNum ; point to student number lookup table
00D9 7406       146            mov a, #06 ; Load second input into accumulator
00DB 93         146            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00DC            146            
00DC F58E       146            mov HEX4, a ; Display number to given (first input) register
00DE            146   
00DE E5F0       146            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
00E0 F5F0       146            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
00E2            146            
00E2 900003     146            mov dptr, #T_StuNum ; point to student number lookup table
00E5 7407       146            mov a, #07 ; Load second input into accumulator
00E7 93         146            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00E8            146            
00E8 F58F       146            mov HEX5, a ; Display number to given (first input) register
00EA            146   
00EA E5F0       146            mov a, b ; Restore value of accumulator (just in case I was doing something important before) ; display first 6 digits
00EC            147            
00EC 02030A     148            ljmp ENDLATCH   
00EF B80163     149   MODE1:   CJNE r0, #01, MODE2             ; jump if A != byte 
00F2            150            ; Mode 1
00F2 F5F0       151            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
00F4            151            
00F4 900003     151            mov dptr, #T_StuNum ; point to student number lookup table
00F7 7408       151            mov a, #08 ; Load second input into accumulator
00F9 93         151            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00FA            151            
00FA F591       151            mov HEX0, a ; Display number to given (first input) register
00FC            151   
00FC E5F0       151            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
00FE F5F0       151            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0100            151            
0100 900003     151            mov dptr, #T_StuNum ; point to student number lookup table
0103 7408       151            mov a, #08 ; Load second input into accumulator
0105 93         151            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0106            151            
0106 F592       151            mov HEX1, a ; Display number to given (first input) register
0108            151   
0108 E5F0       151            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
010A F5F0       151            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
010C            151            
010C 900003     151            mov dptr, #T_StuNum ; point to student number lookup table
010F 7408       151            mov a, #08 ; Load second input into accumulator
0111 93         151            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0112            151            
0112 F593       151            mov HEX2, a ; Display number to given (first input) register
0114            151   
0114 E5F0       151            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0116 F5F0       151            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0118            151            
0118 900003     151            mov dptr, #T_StuNum ; point to student number lookup table
011B 7408       151            mov a, #08 ; Load second input into accumulator
011D 93         151            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
011E            151            
011E F594       151            mov HEX3, a ; Display number to given (first input) register
0120            151   
0120 E5F0       151            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0122 F5F0       151            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0124            151            
0124 900003     151            mov dptr, #T_StuNum ; point to student number lookup table
0127 7408       151            mov a, #08 ; Load second input into accumulator
0129 93         151            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
012A            151            
012A F58E       151            mov HEX4, a ; Display number to given (first input) register
012C            151   
012C E5F0       151            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
012E F5F0       151            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0130            151            
0130 900003     151            mov dptr, #T_StuNum ; point to student number lookup table
0133 7408       151            mov a, #08 ; Load second input into accumulator
0135 93         151            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0136            151            
0136 F58F       151            mov HEX5, a ; Display number to given (first input) register
0138            151   
0138 E5F0       151            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
013A F5F0       152            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
013C            152            
013C 900003     152            mov dptr, #T_StuNum ; point to student number lookup table
013F 7400       152            mov a, #00 ; Load second input into accumulator
0141 93         152            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0142            152            
0142 F591       152            mov HEX0, a ; Display number to given (first input) register
0144            152   
0144 E5F0       152            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0146 F5F0       153            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0148            153            
0148 900003     153            mov dptr, #T_StuNum ; point to student number lookup table
014B 7401       153            mov a, #01 ; Load second input into accumulator
014D 93         153            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
014E            153            
014E F592       153            mov HEX1, a ; Display number to given (first input) register
0150            153   
0150 E5F0       153            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0152            154                    
0152 02030A     155            ljmp ENDLATCH
0155 B80261     156   MODE2:   CJNE r0, #02, MODE3             ; jump if A != byte 
0158            157            ; Mode 2
0158 F5F0       158            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
015A            158            
015A 900003     158            mov dptr, #T_StuNum ; point to student number lookup table
015D 7400       158            mov a, #00 ; Load second input into accumulator
015F 93         158            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0160            158            
0160 FC         158            mov r4, a ; Display number to given (first input) register
0161            158   
0161 E5F0       158            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0163 F5F0       158            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0165            158            
0165 900003     158            mov dptr, #T_StuNum ; point to student number lookup table
0168 7401       158            mov a, #01 ; Load second input into accumulator
016A 93         158            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
016B            158            
016B FD         158            mov r5, a ; Display number to given (first input) register
016C            158   
016C E5F0       158            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
016E F5F0       158            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0170            158            
0170 900003     158            mov dptr, #T_StuNum ; point to student number lookup table
0173 7402       158            mov a, #02 ; Load second input into accumulator
0175 93         158            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0176            158            
0176 F591       158            mov HEX0, a ; Display number to given (first input) register
0178            158   
0178 E5F0       158            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
017A F5F0       158            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
017C            158            
017C 900003     158            mov dptr, #T_StuNum ; point to student number lookup table
017F 7403       158            mov a, #03 ; Load second input into accumulator
0181 93         158            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0182            158            
0182 F592       158            mov HEX1, a ; Display number to given (first input) register
0184            158   
0184 E5F0       158            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0186 F5F0       158            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0188            158            
0188 900003     158            mov dptr, #T_StuNum ; point to student number lookup table
018B 7404       158            mov a, #04 ; Load second input into accumulator
018D 93         158            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
018E            158            
018E F593       158            mov HEX2, a ; Display number to given (first input) register
0190            158   
0190 E5F0       158            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0192 F5F0       158            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0194            158            
0194 900003     158            mov dptr, #T_StuNum ; point to student number lookup table
0197 7405       158            mov a, #05 ; Load second input into accumulator
0199 93         158            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
019A            158            
019A F594       158            mov HEX3, a ; Display number to given (first input) register
019C            158   
019C E5F0       158            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
019E F5F0       158            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
01A0            158            
01A0 900003     158            mov dptr, #T_StuNum ; point to student number lookup table
01A3 7406       158            mov a, #06 ; Load second input into accumulator
01A5 93         158            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01A6            158            
01A6 F58E       158            mov HEX4, a ; Display number to given (first input) register
01A8            158   
01A8 E5F0       158            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
01AA F5F0       158            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
01AC            158            
01AC 900003     158            mov dptr, #T_StuNum ; point to student number lookup table
01AF 7407       158            mov a, #07 ; Load second input into accumulator
01B1 93         158            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01B2            158            
01B2 F58F       158            mov HEX5, a ; Display number to given (first input) register
01B4            158   
01B4 E5F0       158            mov a, b ; Restore value of accumulator (just in case I was doing something important before) ; display first 6 digits
01B6 02030A     159            ljmp ENDLATCH
01B9 B80361     160   MODE3:   CJNE r0, #03, MODE4             ; jump if A != byte 
01BC            161            ; Mode 3
01BC F5F0       162            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
01BE            162            
01BE 900003     162            mov dptr, #T_StuNum ; point to student number lookup table
01C1 7400       162            mov a, #00 ; Load second input into accumulator
01C3 93         162            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01C4            162            
01C4 FC         162            mov r4, a ; Display number to given (first input) register
01C5            162   
01C5 E5F0       162            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
01C7 F5F0       162            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
01C9            162            
01C9 900003     162            mov dptr, #T_StuNum ; point to student number lookup table
01CC 7401       162            mov a, #01 ; Load second input into accumulator
01CE 93         162            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01CF            162            
01CF FD         162            mov r5, a ; Display number to given (first input) register
01D0            162   
01D0 E5F0       162            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
01D2 F5F0       162            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
01D4            162            
01D4 900003     162            mov dptr, #T_StuNum ; point to student number lookup table
01D7 7402       162            mov a, #02 ; Load second input into accumulator
01D9 93         162            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01DA            162            
01DA F591       162            mov HEX0, a ; Display number to given (first input) register
01DC            162   
01DC E5F0       162            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
01DE F5F0       162            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
01E0            162            
01E0 900003     162            mov dptr, #T_StuNum ; point to student number lookup table
01E3 7403       162            mov a, #03 ; Load second input into accumulator
01E5 93         162            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01E6            162            
01E6 F592       162            mov HEX1, a ; Display number to given (first input) register
01E8            162   
01E8 E5F0       162            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
01EA F5F0       162            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
01EC            162            
01EC 900003     162            mov dptr, #T_StuNum ; point to student number lookup table
01EF 7404       162            mov a, #04 ; Load second input into accumulator
01F1 93         162            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01F2            162            
01F2 F593       162            mov HEX2, a ; Display number to given (first input) register
01F4            162   
01F4 E5F0       162            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
01F6 F5F0       162            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
01F8            162            
01F8 900003     162            mov dptr, #T_StuNum ; point to student number lookup table
01FB 7405       162            mov a, #05 ; Load second input into accumulator
01FD 93         162            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01FE            162            
01FE F594       162            mov HEX3, a ; Display number to given (first input) register
0200            162   
0200 E5F0       162            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0202 F5F0       162            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0204            162            
0204 900003     162            mov dptr, #T_StuNum ; point to student number lookup table
0207 7406       162            mov a, #06 ; Load second input into accumulator
0209 93         162            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
020A            162            
020A F58E       162            mov HEX4, a ; Display number to given (first input) register
020C            162   
020C E5F0       162            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
020E F5F0       162            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0210            162            
0210 900003     162            mov dptr, #T_StuNum ; point to student number lookup table
0213 7407       162            mov a, #07 ; Load second input into accumulator
0215 93         162            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0216            162            
0216 F58F       162            mov HEX5, a ; Display number to given (first input) register
0218            162   
0218 E5F0       162            mov a, b ; Restore value of accumulator (just in case I was doing something important before) ; display first 6 digits
021A 02030A     163            ljmp ENDLATCH
021D B8044B     164   MODE4:   CJNE r0, #04, MODE5             ; jump if A != byte 
0220            165            ; Mode 4
0220 F5F0       166            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0222            166            
0222 900003     166            mov dptr, #T_StuNum ; point to student number lookup table
0225 7400       166            mov a, #00 ; Load second input into accumulator
0227 93         166            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0228            166            
0228 F591       166            mov HEX0, a ; Display number to given (first input) register
022A            166   
022A E5F0       166            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
022C F5F0       166            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
022E            166            
022E 900003     166            mov dptr, #T_StuNum ; point to student number lookup table
0231 7401       166            mov a, #01 ; Load second input into accumulator
0233 93         166            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0234            166            
0234 F592       166            mov HEX1, a ; Display number to given (first input) register
0236            166   
0236 E5F0       166            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0238 F5F0       166            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
023A            166            
023A 900003     166            mov dptr, #T_StuNum ; point to student number lookup table
023D 7402       166            mov a, #02 ; Load second input into accumulator
023F 93         166            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0240            166            
0240 F593       166            mov HEX2, a ; Display number to given (first input) register
0242            166   
0242 E5F0       166            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0244 F5F0       166            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0246            166            
0246 900003     166            mov dptr, #T_StuNum ; point to student number lookup table
0249 7403       166            mov a, #03 ; Load second input into accumulator
024B 93         166            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
024C            166            
024C F594       166            mov HEX3, a ; Display number to given (first input) register
024E            166   
024E E5F0       166            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0250 F5F0       166            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0252            166            
0252 900003     166            mov dptr, #T_StuNum ; point to student number lookup table
0255 7404       166            mov a, #04 ; Load second input into accumulator
0257 93         166            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0258            166            
0258 F58E       166            mov HEX4, a ; Display number to given (first input) register
025A            166   
025A E5F0       166            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
025C F5F0       166            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
025E            166            
025E 900003     166            mov dptr, #T_StuNum ; point to student number lookup table
0261 7405       166            mov a, #05 ; Load second input into accumulator
0263 93         166            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0264            166            
0264 F58F       166            mov HEX5, a ; Display number to given (first input) register
0266            166   
0266 E5F0       166            mov a, b ; Restore value of accumulator (just in case I was doing something important before) ; display last 6 digits
0268 02030A     167            ljmp ENDLATCH
026B B8054B     168   MODE5:   CJNE r0, #05, MODE6             ; jump if A != byte 
026E            169            ; Mode 5
026E F5F0       170            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0270            170            
0270 900003     170            mov dptr, #T_StuNum ; point to student number lookup table
0273 7408       170            mov a, #08 ; Load second input into accumulator
0275 93         170            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0276            170            
0276 F591       170            mov HEX0, a ; Display number to given (first input) register
0278            170   
0278 E5F0       170            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
027A F5F0       170            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
027C            170            
027C 900003     170            mov dptr, #T_StuNum ; point to student number lookup table
027F 7408       170            mov a, #08 ; Load second input into accumulator
0281 93         170            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0282            170            
0282 F592       170            mov HEX1, a ; Display number to given (first input) register
0284            170   
0284 E5F0       170            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0286 F5F0       170            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0288            170            
0288 900003     170            mov dptr, #T_StuNum ; point to student number lookup table
028B 7408       170            mov a, #08 ; Load second input into accumulator
028D 93         170            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
028E            170            
028E F593       170            mov HEX2, a ; Display number to given (first input) register
0290            170   
0290 E5F0       170            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0292 F5F0       170            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0294            170            
0294 900003     170            mov dptr, #T_StuNum ; point to student number lookup table
0297 7408       170            mov a, #08 ; Load second input into accumulator
0299 93         170            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
029A            170            
029A F594       170            mov HEX3, a ; Display number to given (first input) register
029C            170   
029C E5F0       170            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
029E F5F0       170            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
02A0            170            
02A0 900003     170            mov dptr, #T_StuNum ; point to student number lookup table
02A3 7408       170            mov a, #08 ; Load second input into accumulator
02A5 93         170            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
02A6            170            
02A6 F58E       170            mov HEX4, a ; Display number to given (first input) register
02A8            170   
02A8 E5F0       170            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
02AA F5F0       170            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
02AC            170            
02AC 900003     170            mov dptr, #T_StuNum ; point to student number lookup table
02AF 7408       170            mov a, #08 ; Load second input into accumulator
02B1 93         170            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
02B2            170            
02B2 F58F       170            mov HEX5, a ; Display number to given (first input) register
02B4            170   
02B4 E5F0       170            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
02B6            171            
02B6 02030A     172            ljmp ENDLATCH
02B9 B8064B     173   MODE6:   CJNE r0, #06, MODE7             ; jump if A != byte 
02BC            174            ; Mode 6
02BC F5F0       175            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
02BE            175            
02BE 900003     175            mov dptr, #T_StuNum ; point to student number lookup table
02C1 7408       175            mov a, #08H ; Load second input into accumulator
02C3 93         175            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
02C4            175            
02C4 F591       175            mov HEX0, a ; Display number to given (first input) register
02C6            175   
02C6 E5F0       175            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
02C8 F5F0       175            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
02CA            175            
02CA 900003     175            mov dptr, #T_StuNum ; point to student number lookup table
02CD 740C       175            mov a, #0CH ; Load second input into accumulator
02CF 93         175            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
02D0            175            
02D0 F592       175            mov HEX1, a ; Display number to given (first input) register
02D2            175   
02D2 E5F0       175            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
02D4 F5F0       175            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
02D6            175            
02D6 900003     175            mov dptr, #T_StuNum ; point to student number lookup table
02D9 740B       175            mov a, #0BH ; Load second input into accumulator
02DB 93         175            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
02DC            175            
02DC F593       175            mov HEX2, a ; Display number to given (first input) register
02DE            175   
02DE E5F0       175            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
02E0 F5F0       175            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
02E2            175            
02E2 900003     175            mov dptr, #T_StuNum ; point to student number lookup table
02E5 740B       175            mov a, #0BH ; Load second input into accumulator
02E7 93         175            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
02E8            175            
02E8 F594       175            mov HEX3, a ; Display number to given (first input) register
02EA            175   
02EA E5F0       175            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
02EC F5F0       175            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
02EE            175            
02EE 900003     175            mov dptr, #T_StuNum ; point to student number lookup table
02F1 740A       175            mov a, #0AH ; Load second input into accumulator
02F3 93         175            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
02F4            175            
02F4 F58E       175            mov HEX4, a ; Display number to given (first input) register
02F6            175   
02F6 E5F0       175            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
02F8 F5F0       175            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
02FA            175            
02FA 900003     175            mov dptr, #T_StuNum ; point to student number lookup table
02FD 7409       175            mov a, #09H ; Load second input into accumulator
02FF 93         175            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0300            175            
0300 F58F       175            mov HEX5, a ; Display number to given (first input) register
0302            175   
0302 E5F0       175            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0304            176            
0304 02030A     177            ljmp ENDLATCH
0307            178   MODE7:   ; this should be the "else" case
0307            179            ; Mode 7
0307            180            ; Up to you to implement
0307            181            
0307 02030A     182            ljmp ENDLATCH   
030A            183   ENDLATCH: 
030A            184   
030A            185   ; The code under this label has to do with timekeeping
030A            186   TIMELOGIC:       
030A            187            ; Timing logic
030A D95A       188            djnz r1, ENDTIME
030C 7964       189            mov r1, S_TICKS         ; if we got here, that means r1 is zero
030E DA56       190            djnz r2, ENDTIME
0310 7A64       191            mov r2, M_TICKS         ; if we got here, that means r2 is zero
0312 DB52       192            djnz r3, ENDTIME
0314 7B96       193            mov r3, L_TICKS         ; if we got here, that means r3 is zero
0316            194            
0316            195            ; these lines execute once a "heartbeat"
0316 B2E8       196            cpl LEDRA.0             ;flip LED to visualize heartbeat
0318            197            
0318            198            ; Think of this as a big Switch statement that finds what mode we are in
0318            199            ; Modes that have time-dependant behavior: 2, 3, 4, 5, 6
0318 B8021B     200            CJNE r0, #02, MODE3T            ; jump if r0 != byte
031B            201            ; Mode 2
031B 8DF0       202            mov b, r5 ; "temp" keep
031D            202            
031D EC         202            mov a, r4
031E FD         202            mov r5, a
031F AC8F       202            mov r4, HEX5
0321 858E8F     202            mov HEX5, HEX4
0324 85948E     202            mov HEX4, HEX3
0327 859394     202            mov HEX3, HEX2
032A 859293     202            mov HEX2, HEX1
032D 859192     202            mov HEX1, HEX0
0330 85F091     202            mov HEX0, b
0333 020366     203            ljmp ENDTIME    
0336 B8031B     204   MODE3T:  CJNE r0, #03, MODE4T            ; jump if r0 != byte 
0339            205            ; Mode 3
0339 8591F0     206            mov b, HEX0 ; "temp" keep
033C            206            
033C 859291     206            mov HEX0, HEX1
033F 859392     206            mov HEX1, HEX2
0342 859493     206            mov HEX2, HEX3
0345 858E94     206            mov HEX3, HEX4
0348 858F8E     206            mov HEX4, HEX5
034B 8C8F       206            mov HEX5, r4
034D ED         206            mov a, r5
034E FC         206            mov r4, a
034F ADF0       206            mov r5, b
0351            207                    
0351 020366     208            ljmp ENDTIME
0354 B80403     209   MODE4T:  CJNE r0, #04, MODE5T            ; jump if A != byte 
0357            210            ; Mode 4
0357            211            
0357 020366     212            ljmp ENDTIME
035A B80503     213   MODE5T:  CJNE r0, #05, MODE6T            ; jump if A != byte 
035D            214            ; Mode 5
035D            215   
035D 020366     216            ljmp ENDTIME
0360 B80603     217   MODE6T:  CJNE r0, #06, ENDTIME           ; jump if A != byte 
0363            218            ; Mode 6
0363            219   
0363 020366     220            ljmp ENDTIME
0366            221            
0366            222   ENDTIME:
0366            223   
0366 02007D     224            ljmp loop ; Go back up to loop to keep repeating forever
0369            225   END
