                 -1   $MODDE0CV ; Special Function Registers declaration for CV-8052
0000              1   ;  MODDDE2: Register definition for DE2-8052 softcore
0000              2   ;
0000              3   ;   Copyright (C) 2011  Jesus Calvino-Fraga, jesusc at ece.ubc.ca
0000              4   ;
0000              5   ;   This library is free software; you can redistribute it and/or
0000              6   ;   modify it under the terms of the GNU Lesser General Public
0000              7   ;   License as published by the Free Software Foundation; either
0000              8   ;   version 2.1 of the License, or (at your option) any later version.
0000              9   ;
0000             10   ;   This library is distributed in the hope that it will be useful,
0000             11   ;   but WITHOUT ANY WARRANTY; without even the implied warranty of
0000             12   ;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
0000             13   ;   Lesser General Public License for more details.
0000             14   ;
0000             15   ;   You should have received a copy of the GNU Lesser General Public
0000             16   ;   License along with this library; if not, write to the Free Software
0000             17   ;   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
0000             18   ;
0000             19       
0000             20   P0     DATA  080H  ;PORT 0
0000             21   SP     DATA  081H  ;STACK POINTER
0000             22   DPL    DATA  082H  ;DATA POINTER 0 - LOW BYTE
0000             23   DPH    DATA  083H  ;DATA POINTER 0 - HIGH BYTE
0000             24   DPL1   DATA  084H  ;DATA POINTER 1 - LOW BYTE
0000             25   DPH1   DATA  085H  ;DATA POINTER 1 - HIGH BYTE
0000             26   DPS    DATA  086H  ;DATA POINTER SELECT. DPH1, DPL1 active when DPS.0=1
0000             27   PCON   DATA  087H  ;POWER CONTROL
0000             28   TCON   DATA  088H  ;TIMER CONTROL
0000             29   TMOD   DATA  089H  ;TIMER MODE
0000             30   TL0    DATA  08AH  ;TIMER 0 - LOW BYTE
0000             31   TL1    DATA  08BH  ;TIMER 1 - LOW BYTE
0000             32   TH0    DATA  08CH  ;TIMER 0 - HIGH BYTE
0000             33   TH1    DATA  08DH  ;TIMER 1 - HIGH BYTE
0000             34   P1     DATA  090H  ;PORT 1
0000             35   SCON   DATA  098H  ;SERIAL PORT CONTROL
0000             36   SBUF   DATA  099H  ;SERIAL PORT BUFFER
0000             37   P2     DATA  0A0H  ;PORT 2
0000             38   IE     DATA  0A8H  ;INTERRUPT ENABLE
0000             39   P3     DATA  0B0H  ;PORT 3
0000             40   IP     DATA  0B8H  ;INTERRUPT PRIORITY
0000             41   T2CON  DATA  0C8H  ;TIMER 2 CONTROL
0000             42   T2MOD  DATA  0C9H  ;TIMER 2 MODE
0000             43   RCAP2L DATA  0CAH  ;TIMER 2 CAPTURE REGISTER - LOW BYTE
0000             44   RCAP2H DATA  0CBH  ;TIMER 2 CAPTURE REGISTER - HIGH BYTE
0000             45   TL2    DATA  0CCH  ;TIMER 2 - LOW BYTE
0000             46   TH2    DATA  0CDH  ;TIMER 2 - HIGH BYTE
0000             47   PSW    DATA  0D0H  ;PROGRAM STATUS WORD
0000             48   ACC    DATA  0E0H  ;ACCUMULATOR
0000             49   B      DATA  0F0H  ;MULTIPLICATION REGISTER
0000             50   IT0    BIT   088H  ;TCON.0 - EXT. INTERRUPT 0 TYPE
0000             51   IE0    BIT   089H  ;TCON.1 - EXT. INTERRUPT 0 EDGE FLAG
0000             52   IT1    BIT   08AH  ;TCON.2 - EXT. INTERRUPT 1 TYPE
0000             53   IE1    BIT   08BH  ;TCON.3 - EXT. INTERRUPT 1 EDGE FLAG
0000             54   TR0    BIT   08CH  ;TCON.4 - TIMER 0 ON/OFF CONTROL
0000             55   TF0    BIT   08DH  ;TCON.5 - TIMER 0 OVERFLOW FLAG
0000             56   TR1    BIT   08EH  ;TCON.6 - TIMER 1 ON/OFF CONTROL
0000             57   TF1    BIT   08FH  ;TCON.7 - TIMER 1 OVERFLOW FLAG
0000             58   RI     BIT   098H  ;SCON.0 - RECEIVE INTERRUPT FLAG
0000             59   TI     BIT   099H  ;SCON.1 - TRANSMIT INTERRUPT FLAG
0000             60   RB8    BIT   09AH  ;SCON.2 - RECEIVE BIT 8
0000             61   TB8    BIT   09BH  ;SCON.3 - TRANSMIT BIT 8
0000             62   REN    BIT   09CH  ;SCON.4 - RECEIVE ENABLE
0000             63   SM2    BIT   09DH  ;SCON.5 - SERIAL MODE CONTROL BIT 2
0000             64   SM1    BIT   09EH  ;SCON.6 - SERIAL MODE CONTROL BIT 1
0000             65   SM0    BIT   09FH  ;SCON.7 - SERIAL MODE CONTROL BIT 0
0000             66   EX0    BIT   0A8H  ;IE.0 - EXTERNAL INTERRUPT 0 ENABLE
0000             67   ET0    BIT   0A9H  ;IE.1 - TIMER 0 INTERRUPT ENABLE
0000             68   EX1    BIT   0AAH  ;IE.2 - EXTERNAL INTERRUPT 1 ENABLE
0000             69   ET1    BIT   0ABH  ;IE.3 - TIMER 1 INTERRUPT ENABLE
0000             70   ES     BIT   0ACH  ;IE.4 - SERIAL PORT INTERRUPT ENABLE
0000             71   ET2    BIT   0ADH  ;IE.5 - TIMER 2 INTERRUPT ENABLE
0000             72   EA     BIT   0AFH  ;IE.7 - GLOBAL INTERRUPT ENABLE
0000             73   RXD    BIT   0B0H  ;P3.0 - SERIAL PORT RECEIVE INPUT
0000             74   TXD    BIT   0B1H  ;P3.1 - SERIAL PORT TRANSMIT OUTPUT
0000             75   INT0   BIT   0B2H  ;P3.2 - EXTERNAL INTERRUPT 0 INPUT
0000             76   INT1   BIT   0B3H  ;P3.3 - EXTERNAL INTERRUPT 1 INPUT
0000             77   T0     BIT   0B4H  ;P3.4 - TIMER 0 COUNT INPUT
0000             78   T1     BIT   0B5H  ;P3.5 - TIMER 1 COUNT INPUT
0000             79   WR     BIT   0B6H  ;P3.6 - WRITE CONTROL FOR EXT. MEMORY
0000             80   RD     BIT   0B7H  ;P3.7 - READ CONTROL FOR EXT. MEMORY
0000             81   PX0    BIT   0B8H  ;IP.0 - EXTERNAL INTERRUPT 0 PRIORITY
0000             82   PT0    BIT   0B9H  ;IP.1 - TIMER 0 PRIORITY
0000             83   PX1    BIT   0BAH  ;IP.2 - EXTERNAL INTERRUPT 1 PRIORITY
0000             84   PT1    BIT   0BBH  ;IP.3 - TIMER 1 PRIORITY
0000             85   PS     BIT   0BCH  ;IP.4 - SERIAL PORT PRIORITY
0000             86   PT2    BIT   0BDH  ;IP.5 - TIMER 2 PRIORITY
0000             87   CAP2   BIT   0C8H  ;T2CON.0 - CAPTURE OR RELOAD SELECT
0000             88   CNT2   BIT   0C9H  ;T2CON.1 - TIMER OR COUNTER SELECT
0000             89   TR2    BIT   0CAH  ;T2CON.2 - TIMER 2 ON/OFF CONTROL
0000             90   EXEN2  BIT   0CBH  ;T2CON.3 - TIMER 2 EXTERNAL ENABLE FLAG
0000             91   TCLK   BIT   0CCH  ;T2CON.4 - TRANSMIT CLOCK SELECT
0000             92   RCLK   BIT   0CDH  ;T2CON.5 - RECEIVE CLOCK SELECTT
0000             93   EXF2   BIT   0CEH  ;T2CON.6 - EXTERNAL TRANSITION FLAG
0000             94   TF2    BIT   0CFH  ;T2CON.7 - TIMER 2 OVERFLOW FLAG
0000             95   P      BIT   0D0H  ;PSW.0 - ACCUMULATOR PARITY FLAG
0000             96   OV     BIT   0D2H  ;PSW.2 - OVERFLOW FLAG
0000             97   RS0    BIT   0D3H  ;PSW.3 - REGISTER BANK SELECT 0
0000             98   RS1    BIT   0D4H  ;PSW.4 - REGISTER BANK SELECT 1
0000             99   F0     BIT   0D5H  ;PSW.5 - FLAG 0
0000            100   AC     BIT   0D6H  ;PSW.6 - AUXILIARY CARRY FLAG
0000            101   CY     BIT   0D7H  ;PSW.7 - CARRY FLAG
0000            102   
0000            103   ; For the altera DE2 configured with an 8051/8052 softcore processor
0000            104   ; we have the following extra registers:
0000            105   
0000            106   HEX0   DATA  091H ; Zero turns the segment on
0000            107   HEX1   DATA  092H ; 
0000            108   HEX2   DATA  093H ; 
0000            109   HEX3   DATA  094H ; 
0000            110   HEX4   DATA  08EH ;
0000            111   HEX5   DATA  08FH ;
0000            112   HEX6   DATA  096H ;
0000            113   HEX7   DATA  097H ;
0000            114   
0000            115   P0MOD  DATA  09AH ; Input/output mode bits for port 0.  '1' sets the port to output mode.
0000            116   P1MOD  DATA  09BH ; Input/output mode bits for port 1
0000            117   P2MOD  DATA  09CH ; Input/output mode bits for port 2
0000            118   P3MOD  DATA  09DH ; Input/output mode bits for port 3
0000            119   
0000            120   LEDRA  DATA  0E8H ; LEDs LEDR0 to LEDR7 (bit addressable, ex: LEDRA.1 for LEDR1)
0000            121   LEDRB  DATA  095H ; LEDs LEDR8 to LEDR15
0000            122   LEDRC  DATA  09EH ; LEDs LEDR16, LEDR15, and LEDG8
0000            123   LEDG   DATA  0F8H ; LEDs LEDG0 to LEDG7 (bit addressable, ex: LEDG.3 for LEDG3)
0000            124   SWA    DATA  0E8H ; Switches SW0 to SW7 (bit addressable, ex: SWA.1 for SW1)
0000            125   SWB    DATA  095H ; Switches SW8 to SW15
0000            126   SWC    DATA  09EH ; Switches SW16 and SW17
0000            127   KEY    DATA  0F8H ; KEY1=KEY.1, KEY2=KEY.2, KEY3=KEY.3.  KEY0 is the reset button! 
0000            128   
0000            129   LCD_CMD   DATA 0D8H ;
0000            130   LCD_DATA  DATA 0D9H ;
0000            131   LCD_MOD   DATA 0DAH ; Write 0xff to make LCD_DATA an output
0000            132   LCD_RW    BIT  0D8H ; '0' writes to LCD
0000            133   LCD_EN    BIT  0D9H ; Toggle from '1' to '0'
0000            134   LCD_RS    BIT  0DAH ; '0' for commands, '1' for data
0000            135   LCD_ON    BIT  0DBH ; Write '1' to power the LCD
0000            136   LCD_BLON  BIT  0DCH ; Write '1' to turn on back light
0000            137   
0000            138   FLASH_CMD  data 0DBH ; The control bits of the flash memory:
0000            139   ; bit 0: FL_RST_N  Set to 1 for normal operation
0000            140   ; bit 1: FL_WE_N
0000            141   ; bit 2: FL_OE_N
0000            142   ; bit 3: FL_CE_N
0000            143   FLASH_DATA data 0DCH ; 8-bit data bus of flash memory.
0000            144   FLASH_MOD  data 0DDH ; 0xff makes FLASH_DATA output.  0x00 makes FLASH_DATA input.
0000            145   FLASH_ADD0 data 0E1H ; address bits 0 to 7.
0000            146   FLASH_ADD1 data 0E2H ; address bits 8 to 15.
0000            147   FLASH_ADD2 data 0E3H ; address bits 16 to 21.
0000            148   
0000              2   
0000              3   org 0000H ; Which code memory location to start at after reset
0000 020010       4            ljmp pgrmstart  ; jump down to the label called "pgrmstart"
0003              5   
0003              6   ;These three values are associated with the timing of the circuit
0003              7   ;Tune them to set the "heartbeat" of the program
0003              8   ;The time between "heartbeats" is a function of product of these three
0003              9   ;But none of them can be over 255 (8 bit)
0003             10   S_TICKS EQU #100
0003             11   M_TICKS EQU #100
0003             12   L_TICKS EQU #90
0003             13   
0003             14   ; Look-up table for my student number, blank, and HELLO
0003             15   ; My student num: 48059760
0003             16   T_StuNum:
0003             17            ;       0       6         7        9    5        0        8        4    
0003 40027810    18            DB 40H, 02H, 78H, 10H, 12H, 40H, 00H, 19H
     12400019
000B             19            ; BLANK
000B 7F          20            DB 7FH
000C             21            ;   H    E        L        O
000C 8986C740    22            DB 89H, 86H, 0xC7H, 40H
0010             23   
0010             24   ;This is a "function", it takes two parameters. These parameters can be accessed using %0 and %1
                 25   Display_on mac
                 26   	mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
                 27   	
                 28   	mov dptr, #T_StuNum ; point to student number lookup table
                 29   	mov a, %1 ; Load second input into accumulator
                 30   	movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
                 31   	
                 32   	mov %0, a ; Display number to given (first input) register
                 33   
                 34   	mov a, b ; Restore value of accumulator (just in case I was doing something important before)
                 35   endmac
0010             36   
0010             37   ;This is a "function", it takes no parameters. It just displays the first 6 digits of my student number
                 38   Most_sig mac
                 39   	Display_on(HEX0, #02)
                 40   	Display_on(HEX1, #03)
                 41   	Display_on(HEX2, #04)
                 42   	Display_on(HEX3, #05)
                 43   	Display_on(HEX4, #06)
                 44   	Display_on(HEX5, #07)
                 45   endmac
0010             46   
0010             47   ;This is a "function", it takes no parameters. It just displays all blank
                 48   All_blnk mac
                 49   	Display_on(HEX0, #08)
                 50   	Display_on(HEX1, #08)
                 51   	Display_on(HEX2, #08)
                 52   	Display_on(HEX3, #08)
                 53   	Display_on(HEX4, #08)
                 54   	Display_on(HEX5, #08)
                 55   endmac
0010             56   
0010             57   ;This is a "function", it takes no parameters. It just displays the last 6 digits of my student number
                 58   Least_sig mac
                 59   	Display_on(HEX0, #00)
                 60   	Display_on(HEX1, #01)
                 61   	Display_on(HEX2, #02)
                 62   	Display_on(HEX3, #03)
                 63   	Display_on(HEX4, #04)
                 64   	Display_on(HEX5, #05)
                 65   endmac
0010             66   
0010             67   ;This is a "function", it takes no parameters. It just displays HELLO
                 68   Hello mac
                 69   	Display_on(HEX0, #08H)
                 70   	Display_on(HEX1, #0CH)
                 71   	Display_on(HEX2, #0BH)
                 72   	Display_on(HEX3, #0BH)
                 73   	Display_on(HEX4, #0AH)
                 74   	Display_on(HEX5, #09H)
                 75   endmac
0010             76   
0010             77   ;This is a "function", it takes no parameters. It just displays the custom display for mode 7
                 78   Custom_disp mac
                 79   	; Up to you to implement
                 80   endmac
0010             81   
                 82   Scrll_left mac
                 83   	
                 84   endmac
0010             85   
                 86   Scrll_right mac
                 87   	mov b, HEX0 ; "temp" keep
                 88   	
                 89   	mov HEX0, HEX1
                 90   	mov HEX1, HEX2
                 91   	mov HEX2, HEX3
                 92   	mov HEX3, HEX4
                 93   	mov HEX4, HEX5
                 94   	mov HEX5, r4
                 95   	mov a, r5
                 96   	mov r4, a
                 97   	mov r5, b
                 98   endmac
0010             99   
0010            100   ; The code under this label runs once, when the program starts
0010            101   pgrmstart:
0010            102            ; Turns off LEDs and stuff
0010 75817F     103            mov SP, #0x7f
0013 75E800     104            mov LEDRA, #0 ; Bit addressable
0016 759500     105            mov LEDRB, #0 ; Not bit addressable
0019            106            
0019            107            ; Start timer
0019 7964       108            mov r1, S_TICKS
001B 7A64       109            mov r2, M_TICKS
001D 7B5A       110            mov r3, L_TICKS
001F            111            
001F            112            ; Mode 0 by default, display first 6 digits
001F F5F0       113            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0021            113            
0021 900003     113            mov dptr, #T_StuNum ; point to student number lookup table
0024 7402       113            mov a, #02 ; Load second input into accumulator
0026 93         113            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0027            113            
0027 F591       113            mov HEX0, a ; Display number to given (first input) register
0029            113   
0029 E5F0       113            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
002B F5F0       113            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
002D            113            
002D 900003     113            mov dptr, #T_StuNum ; point to student number lookup table
0030 7403       113            mov a, #03 ; Load second input into accumulator
0032 93         113            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0033            113            
0033 F592       113            mov HEX1, a ; Display number to given (first input) register
0035            113   
0035 E5F0       113            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0037 F5F0       113            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0039            113            
0039 900003     113            mov dptr, #T_StuNum ; point to student number lookup table
003C 7404       113            mov a, #04 ; Load second input into accumulator
003E 93         113            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
003F            113            
003F F593       113            mov HEX2, a ; Display number to given (first input) register
0041            113   
0041 E5F0       113            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0043 F5F0       113            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0045            113            
0045 900003     113            mov dptr, #T_StuNum ; point to student number lookup table
0048 7405       113            mov a, #05 ; Load second input into accumulator
004A 93         113            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
004B            113            
004B F594       113            mov HEX3, a ; Display number to given (first input) register
004D            113   
004D E5F0       113            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
004F F5F0       113            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0051            113            
0051 900003     113            mov dptr, #T_StuNum ; point to student number lookup table
0054 7406       113            mov a, #06 ; Load second input into accumulator
0056 93         113            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0057            113            
0057 F58E       113            mov HEX4, a ; Display number to given (first input) register
0059            113   
0059 E5F0       113            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
005B F5F0       113            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
005D            113            
005D 900003     113            mov dptr, #T_StuNum ; point to student number lookup table
0060 7407       113            mov a, #07 ; Load second input into accumulator
0062 93         113            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0063            113            
0063 F58F       113            mov HEX5, a ; Display number to given (first input) register
0065            113   
0065 E5F0       113            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0067            114            
0067            115   ; The code under this label runs continuously
0067            116   loop:
0067            117            ; Latching logic
0067 20FB03     118            jb key.3, ENDLATCHtmp   ; jump if bit 3 of switch is = 1
006A 020070     119            ljmp LATCHLOGIC
006D 0202BA     120   ENDLATCHtmp: ljmp ENDLATCH       ; I have to do this weird jumping bc jb can only jump up to 127 lines
0070            121   
0070            122   ; The code under this label has to do with latching our mode, and updating the display
0070            123   ; to the "first frame" of that mode
0070            124   LATCHLOGIC:
0070            125            ; Evaluate initial display depending on mode
0070 E5E8       126            mov a, SWA                                                      
0072 5407       127            ANL a, #07                              ; strip A to only the least significant 3 values by ANDing it with 00000111 (Not strictly nesc.)
0074 F8         128            mov r0, a                               ; store switch values in r0
0075            129            ; Think of this as a big Switch statement that finds what mode we are in
0075            130            ; There is a better way to do this, as a lot of the modes have the same start
0075            131            ; However, to start with this is a more clear way to see what is going on
0075 B8004B     132            CJNE r0, #00, MODE1             ; jump if r0 != byte
0078            133            ; Mode 0
0078 F5F0       134            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
007A            134            
007A 900003     134            mov dptr, #T_StuNum ; point to student number lookup table
007D 7402       134            mov a, #02 ; Load second input into accumulator
007F 93         134            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0080            134            
0080 F591       134            mov HEX0, a ; Display number to given (first input) register
0082            134   
0082 E5F0       134            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0084 F5F0       134            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0086            134            
0086 900003     134            mov dptr, #T_StuNum ; point to student number lookup table
0089 7403       134            mov a, #03 ; Load second input into accumulator
008B 93         134            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
008C            134            
008C F592       134            mov HEX1, a ; Display number to given (first input) register
008E            134   
008E E5F0       134            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0090 F5F0       134            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0092            134            
0092 900003     134            mov dptr, #T_StuNum ; point to student number lookup table
0095 7404       134            mov a, #04 ; Load second input into accumulator
0097 93         134            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0098            134            
0098 F593       134            mov HEX2, a ; Display number to given (first input) register
009A            134   
009A E5F0       134            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
009C F5F0       134            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
009E            134            
009E 900003     134            mov dptr, #T_StuNum ; point to student number lookup table
00A1 7405       134            mov a, #05 ; Load second input into accumulator
00A3 93         134            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00A4            134            
00A4 F594       134            mov HEX3, a ; Display number to given (first input) register
00A6            134   
00A6 E5F0       134            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
00A8 F5F0       134            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
00AA            134            
00AA 900003     134            mov dptr, #T_StuNum ; point to student number lookup table
00AD 7406       134            mov a, #06 ; Load second input into accumulator
00AF 93         134            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00B0            134            
00B0 F58E       134            mov HEX4, a ; Display number to given (first input) register
00B2            134   
00B2 E5F0       134            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
00B4 F5F0       134            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
00B6            134            
00B6 900003     134            mov dptr, #T_StuNum ; point to student number lookup table
00B9 7407       134            mov a, #07 ; Load second input into accumulator
00BB 93         134            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00BC            134            
00BC F58F       134            mov HEX5, a ; Display number to given (first input) register
00BE            134   
00BE E5F0       134            mov a, b ; Restore value of accumulator (just in case I was doing something important before) ; display first 6 digits
00C0            135            
00C0 0202BA     136            ljmp ENDLATCH   
00C3 B80163     137   MODE1:   CJNE r0, #01, MODE2             ; jump if A != byte 
00C6            138            ; Mode 1
00C6 F5F0       139            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
00C8            139            
00C8 900003     139            mov dptr, #T_StuNum ; point to student number lookup table
00CB 7408       139            mov a, #08 ; Load second input into accumulator
00CD 93         139            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00CE            139            
00CE F591       139            mov HEX0, a ; Display number to given (first input) register
00D0            139   
00D0 E5F0       139            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
00D2 F5F0       139            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
00D4            139            
00D4 900003     139            mov dptr, #T_StuNum ; point to student number lookup table
00D7 7408       139            mov a, #08 ; Load second input into accumulator
00D9 93         139            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00DA            139            
00DA F592       139            mov HEX1, a ; Display number to given (first input) register
00DC            139   
00DC E5F0       139            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
00DE F5F0       139            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
00E0            139            
00E0 900003     139            mov dptr, #T_StuNum ; point to student number lookup table
00E3 7408       139            mov a, #08 ; Load second input into accumulator
00E5 93         139            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00E6            139            
00E6 F593       139            mov HEX2, a ; Display number to given (first input) register
00E8            139   
00E8 E5F0       139            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
00EA F5F0       139            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
00EC            139            
00EC 900003     139            mov dptr, #T_StuNum ; point to student number lookup table
00EF 7408       139            mov a, #08 ; Load second input into accumulator
00F1 93         139            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00F2            139            
00F2 F594       139            mov HEX3, a ; Display number to given (first input) register
00F4            139   
00F4 E5F0       139            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
00F6 F5F0       139            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
00F8            139            
00F8 900003     139            mov dptr, #T_StuNum ; point to student number lookup table
00FB 7408       139            mov a, #08 ; Load second input into accumulator
00FD 93         139            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00FE            139            
00FE F58E       139            mov HEX4, a ; Display number to given (first input) register
0100            139   
0100 E5F0       139            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0102 F5F0       139            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0104            139            
0104 900003     139            mov dptr, #T_StuNum ; point to student number lookup table
0107 7408       139            mov a, #08 ; Load second input into accumulator
0109 93         139            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
010A            139            
010A F58F       139            mov HEX5, a ; Display number to given (first input) register
010C            139   
010C E5F0       139            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
010E F5F0       140            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0110            140            
0110 900003     140            mov dptr, #T_StuNum ; point to student number lookup table
0113 7400       140            mov a, #00 ; Load second input into accumulator
0115 93         140            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0116            140            
0116 F591       140            mov HEX0, a ; Display number to given (first input) register
0118            140   
0118 E5F0       140            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
011A F5F0       141            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
011C            141            
011C 900003     141            mov dptr, #T_StuNum ; point to student number lookup table
011F 7401       141            mov a, #01 ; Load second input into accumulator
0121 93         141            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0122            141            
0122 F592       141            mov HEX1, a ; Display number to given (first input) register
0124            141   
0124 E5F0       141            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0126            142                    
0126 0202BA     143            ljmp ENDLATCH
0129 B8024F     144   MODE2:   CJNE r0, #02, MODE3             ; jump if A != byte 
012C            145            ; Mode 2
012C F5F0       146            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
012E            146            
012E 900003     146            mov dptr, #T_StuNum ; point to student number lookup table
0131 7402       146            mov a, #02 ; Load second input into accumulator
0133 93         146            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0134            146            
0134 F591       146            mov HEX0, a ; Display number to given (first input) register
0136            146   
0136 E5F0       146            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0138 F5F0       146            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
013A            146            
013A 900003     146            mov dptr, #T_StuNum ; point to student number lookup table
013D 7403       146            mov a, #03 ; Load second input into accumulator
013F 93         146            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0140            146            
0140 F592       146            mov HEX1, a ; Display number to given (first input) register
0142            146   
0142 E5F0       146            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0144 F5F0       146            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0146            146            
0146 900003     146            mov dptr, #T_StuNum ; point to student number lookup table
0149 7404       146            mov a, #04 ; Load second input into accumulator
014B 93         146            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
014C            146            
014C F593       146            mov HEX2, a ; Display number to given (first input) register
014E            146   
014E E5F0       146            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0150 F5F0       146            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0152            146            
0152 900003     146            mov dptr, #T_StuNum ; point to student number lookup table
0155 7405       146            mov a, #05 ; Load second input into accumulator
0157 93         146            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0158            146            
0158 F594       146            mov HEX3, a ; Display number to given (first input) register
015A            146   
015A E5F0       146            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
015C F5F0       146            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
015E            146            
015E 900003     146            mov dptr, #T_StuNum ; point to student number lookup table
0161 7406       146            mov a, #06 ; Load second input into accumulator
0163 93         146            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0164            146            
0164 F58E       146            mov HEX4, a ; Display number to given (first input) register
0166            146   
0166 E5F0       146            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0168 F5F0       146            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
016A            146            
016A 900003     146            mov dptr, #T_StuNum ; point to student number lookup table
016D 7407       146            mov a, #07 ; Load second input into accumulator
016F 93         146            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0170            146            
0170 F58F       146            mov HEX5, a ; Display number to given (first input) register
0172            146   
0172 E5F0       146            mov a, b ; Restore value of accumulator (just in case I was doing something important before) ; display first 6 digits
0174 7C02       147            mov r4, #02H
0176 7D40       148            mov r5, #40H 
0178 0202BA     149            ljmp ENDLATCH
017B B8034F     150   MODE3:   CJNE r0, #03, MODE4             ; jump if A != byte 
017E            151            ; Mode 3
017E F5F0       152            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0180            152            
0180 900003     152            mov dptr, #T_StuNum ; point to student number lookup table
0183 7402       152            mov a, #02 ; Load second input into accumulator
0185 93         152            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0186            152            
0186 F591       152            mov HEX0, a ; Display number to given (first input) register
0188            152   
0188 E5F0       152            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
018A F5F0       152            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
018C            152            
018C 900003     152            mov dptr, #T_StuNum ; point to student number lookup table
018F 7403       152            mov a, #03 ; Load second input into accumulator
0191 93         152            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0192            152            
0192 F592       152            mov HEX1, a ; Display number to given (first input) register
0194            152   
0194 E5F0       152            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0196 F5F0       152            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0198            152            
0198 900003     152            mov dptr, #T_StuNum ; point to student number lookup table
019B 7404       152            mov a, #04 ; Load second input into accumulator
019D 93         152            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
019E            152            
019E F593       152            mov HEX2, a ; Display number to given (first input) register
01A0            152   
01A0 E5F0       152            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
01A2 F5F0       152            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
01A4            152            
01A4 900003     152            mov dptr, #T_StuNum ; point to student number lookup table
01A7 7405       152            mov a, #05 ; Load second input into accumulator
01A9 93         152            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01AA            152            
01AA F594       152            mov HEX3, a ; Display number to given (first input) register
01AC            152   
01AC E5F0       152            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
01AE F5F0       152            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
01B0            152            
01B0 900003     152            mov dptr, #T_StuNum ; point to student number lookup table
01B3 7406       152            mov a, #06 ; Load second input into accumulator
01B5 93         152            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01B6            152            
01B6 F58E       152            mov HEX4, a ; Display number to given (first input) register
01B8            152   
01B8 E5F0       152            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
01BA F5F0       152            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
01BC            152            
01BC 900003     152            mov dptr, #T_StuNum ; point to student number lookup table
01BF 7407       152            mov a, #07 ; Load second input into accumulator
01C1 93         152            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01C2            152            
01C2 F58F       152            mov HEX5, a ; Display number to given (first input) register
01C4            152   
01C4 E5F0       152            mov a, b ; Restore value of accumulator (just in case I was doing something important before) ; display first 6 digits
01C6 7C02       153            mov r4, #02H
01C8 7D40       154            mov r5, #40H 
01CA 0202BA     155            ljmp ENDLATCH
01CD B8044B     156   MODE4:   CJNE r0, #04, MODE5             ; jump if A != byte 
01D0            157            ; Mode 4
01D0 F5F0       158            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
01D2            158            
01D2 900003     158            mov dptr, #T_StuNum ; point to student number lookup table
01D5 7400       158            mov a, #00 ; Load second input into accumulator
01D7 93         158            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01D8            158            
01D8 F591       158            mov HEX0, a ; Display number to given (first input) register
01DA            158   
01DA E5F0       158            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
01DC F5F0       158            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
01DE            158            
01DE 900003     158            mov dptr, #T_StuNum ; point to student number lookup table
01E1 7401       158            mov a, #01 ; Load second input into accumulator
01E3 93         158            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01E4            158            
01E4 F592       158            mov HEX1, a ; Display number to given (first input) register
01E6            158   
01E6 E5F0       158            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
01E8 F5F0       158            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
01EA            158            
01EA 900003     158            mov dptr, #T_StuNum ; point to student number lookup table
01ED 7402       158            mov a, #02 ; Load second input into accumulator
01EF 93         158            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01F0            158            
01F0 F593       158            mov HEX2, a ; Display number to given (first input) register
01F2            158   
01F2 E5F0       158            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
01F4 F5F0       158            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
01F6            158            
01F6 900003     158            mov dptr, #T_StuNum ; point to student number lookup table
01F9 7403       158            mov a, #03 ; Load second input into accumulator
01FB 93         158            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01FC            158            
01FC F594       158            mov HEX3, a ; Display number to given (first input) register
01FE            158   
01FE E5F0       158            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0200 F5F0       158            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0202            158            
0202 900003     158            mov dptr, #T_StuNum ; point to student number lookup table
0205 7404       158            mov a, #04 ; Load second input into accumulator
0207 93         158            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0208            158            
0208 F58E       158            mov HEX4, a ; Display number to given (first input) register
020A            158   
020A E5F0       158            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
020C F5F0       158            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
020E            158            
020E 900003     158            mov dptr, #T_StuNum ; point to student number lookup table
0211 7405       158            mov a, #05 ; Load second input into accumulator
0213 93         158            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0214            158            
0214 F58F       158            mov HEX5, a ; Display number to given (first input) register
0216            158   
0216 E5F0       158            mov a, b ; Restore value of accumulator (just in case I was doing something important before) ; display last 6 digits
0218 0202BA     159            ljmp ENDLATCH
021B B8054B     160   MODE5:   CJNE r0, #05, MODE6             ; jump if A != byte 
021E            161            ; Mode 5
021E F5F0       162            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0220            162            
0220 900003     162            mov dptr, #T_StuNum ; point to student number lookup table
0223 7408       162            mov a, #08 ; Load second input into accumulator
0225 93         162            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0226            162            
0226 F591       162            mov HEX0, a ; Display number to given (first input) register
0228            162   
0228 E5F0       162            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
022A F5F0       162            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
022C            162            
022C 900003     162            mov dptr, #T_StuNum ; point to student number lookup table
022F 7408       162            mov a, #08 ; Load second input into accumulator
0231 93         162            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0232            162            
0232 F592       162            mov HEX1, a ; Display number to given (first input) register
0234            162   
0234 E5F0       162            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0236 F5F0       162            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0238            162            
0238 900003     162            mov dptr, #T_StuNum ; point to student number lookup table
023B 7408       162            mov a, #08 ; Load second input into accumulator
023D 93         162            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
023E            162            
023E F593       162            mov HEX2, a ; Display number to given (first input) register
0240            162   
0240 E5F0       162            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0242 F5F0       162            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0244            162            
0244 900003     162            mov dptr, #T_StuNum ; point to student number lookup table
0247 7408       162            mov a, #08 ; Load second input into accumulator
0249 93         162            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
024A            162            
024A F594       162            mov HEX3, a ; Display number to given (first input) register
024C            162   
024C E5F0       162            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
024E F5F0       162            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0250            162            
0250 900003     162            mov dptr, #T_StuNum ; point to student number lookup table
0253 7408       162            mov a, #08 ; Load second input into accumulator
0255 93         162            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0256            162            
0256 F58E       162            mov HEX4, a ; Display number to given (first input) register
0258            162   
0258 E5F0       162            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
025A F5F0       162            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
025C            162            
025C 900003     162            mov dptr, #T_StuNum ; point to student number lookup table
025F 7408       162            mov a, #08 ; Load second input into accumulator
0261 93         162            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0262            162            
0262 F58F       162            mov HEX5, a ; Display number to given (first input) register
0264            162   
0264 E5F0       162            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0266            163            
0266 0202BA     164            ljmp ENDLATCH
0269 B8064B     165   MODE6:   CJNE r0, #06, MODE7             ; jump if A != byte 
026C            166            ; Mode 6
026C F5F0       167            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
026E            167            
026E 900003     167            mov dptr, #T_StuNum ; point to student number lookup table
0271 7408       167            mov a, #08H ; Load second input into accumulator
0273 93         167            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0274            167            
0274 F591       167            mov HEX0, a ; Display number to given (first input) register
0276            167   
0276 E5F0       167            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0278 F5F0       167            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
027A            167            
027A 900003     167            mov dptr, #T_StuNum ; point to student number lookup table
027D 740C       167            mov a, #0CH ; Load second input into accumulator
027F 93         167            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0280            167            
0280 F592       167            mov HEX1, a ; Display number to given (first input) register
0282            167   
0282 E5F0       167            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0284 F5F0       167            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0286            167            
0286 900003     167            mov dptr, #T_StuNum ; point to student number lookup table
0289 740B       167            mov a, #0BH ; Load second input into accumulator
028B 93         167            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
028C            167            
028C F593       167            mov HEX2, a ; Display number to given (first input) register
028E            167   
028E E5F0       167            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
0290 F5F0       167            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
0292            167            
0292 900003     167            mov dptr, #T_StuNum ; point to student number lookup table
0295 740B       167            mov a, #0BH ; Load second input into accumulator
0297 93         167            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0298            167            
0298 F594       167            mov HEX3, a ; Display number to given (first input) register
029A            167   
029A E5F0       167            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
029C F5F0       167            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
029E            167            
029E 900003     167            mov dptr, #T_StuNum ; point to student number lookup table
02A1 740A       167            mov a, #0AH ; Load second input into accumulator
02A3 93         167            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
02A4            167            
02A4 F58E       167            mov HEX4, a ; Display number to given (first input) register
02A6            167   
02A6 E5F0       167            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
02A8 F5F0       167            mov b, a ; Preserve value of accumulator (just in case I was doing something important before)
02AA            167            
02AA 900003     167            mov dptr, #T_StuNum ; point to student number lookup table
02AD 7409       167            mov a, #09H ; Load second input into accumulator
02AF 93         167            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
02B0            167            
02B0 F58F       167            mov HEX5, a ; Display number to given (first input) register
02B2            167   
02B2 E5F0       167            mov a, b ; Restore value of accumulator (just in case I was doing something important before)
02B4            168            
02B4 0202BA     169            ljmp ENDLATCH
02B7            170   MODE7:   ; this should be the "else" case
02B7            171            ; Mode 7
02B7            172            ; Up to you to implement
02B7            173            
02B7 0202BA     174            ljmp ENDLATCH   
02BA            175   ENDLATCH: 
02BA            176   
02BA            177   ; The code under this label has to do with timekeeping
02BA            178   TIMELOGIC:       
02BA            179            ; Timing logic
02BA D942       180            djnz r1, ENDTIME
02BC 7964       181            mov r1, S_TICKS         ; if we got here, that means r1 is zero
02BE DA3E       182            djnz r2, ENDTIME
02C0 7A64       183            mov r2, M_TICKS         ; if we got here, that means r2 is zero
02C2 DB3A       184            djnz r3, ENDTIME
02C4 7B5A       185            mov r3, L_TICKS         ; if we got here, that means r3 is zero
02C6            186            
02C6            187            ; these lines execute once a "heartbeat"
02C6 B2E8       188            cpl LEDRA.0             ;flip LED to visualize heartbeat
02C8            189            
02C8            190            ; Think of this as a big Switch statement that finds what mode we are in
02C8            191            ; Modes that have time-dependant behavior: 2, 3, 4, 5, 6
02C8 B80203     192            CJNE r0, #02, MODE3T            ; jump if r0 != byte
02CB            193            ; Mode 2
02CB            194            
02CB 0202FE     195            ljmp ENDTIME    
02CE B8031B     196   MODE3T:  CJNE r0, #03, MODE4T            ; jump if r0 != byte 
02D1            197            ; Mode 3
02D1 8591F0     198            mov b, HEX0 ; "temp" keep
02D4            198            
02D4 859291     198            mov HEX0, HEX1
02D7 859392     198            mov HEX1, HEX2
02DA 859493     198            mov HEX2, HEX3
02DD 858E94     198            mov HEX3, HEX4
02E0 858F8E     198            mov HEX4, HEX5
02E3 8C8F       198            mov HEX5, r4
02E5 ED         198            mov a, r5
02E6 FC         198            mov r4, a
02E7 ADF0       198            mov r5, b
02E9            199                    
02E9 0202FE     200            ljmp ENDTIME
02EC B80403     201   MODE4T:  CJNE r0, #04, MODE5T            ; jump if A != byte 
02EF            202            ; Mode 4
02EF            203            
02EF 0202FE     204            ljmp ENDTIME
02F2 B80503     205   MODE5T:  CJNE r0, #05, MODE6T            ; jump if A != byte 
02F5            206            ; Mode 5
02F5            207   
02F5 0202FE     208            ljmp ENDTIME
02F8 B80603     209   MODE6T:  CJNE r0, #06, ENDTIME           ; jump if A != byte 
02FB            210            ; Mode 6
02FB            211   
02FB 0202FE     212            ljmp ENDTIME
02FE            213            
02FE            214   ENDTIME:
02FE            215   
02FE 020067     216            ljmp loop ; Go back up to loop to keep repeating forever
0301            217   END
