                 -1   $MODDE0CV ; Special Function Registers declaration for CV-8052
0000              1   ;  MODDDE2: Register definition for DE2-8052 softcore
0000              2   ;
0000              3   ;   Copyright (C) 2011  Jesus Calvino-Fraga, jesusc at ece.ubc.ca
0000              4   ;
0000              5   ;   This library is free software; you can redistribute it and/or
0000              6   ;   modify it under the terms of the GNU Lesser General Public
0000              7   ;   License as published by the Free Software Foundation; either
0000              8   ;   version 2.1 of the License, or (at your option) any later version.
0000              9   ;
0000             10   ;   This library is distributed in the hope that it will be useful,
0000             11   ;   but WITHOUT ANY WARRANTY; without even the implied warranty of
0000             12   ;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
0000             13   ;   Lesser General Public License for more details.
0000             14   ;
0000             15   ;   You should have received a copy of the GNU Lesser General Public
0000             16   ;   License along with this library; if not, write to the Free Software
0000             17   ;   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
0000             18   ;
0000             19       
0000             20   P0     DATA  080H  ;PORT 0
0000             21   SP     DATA  081H  ;STACK POINTER
0000             22   DPL    DATA  082H  ;DATA POINTER 0 - LOW BYTE
0000             23   DPH    DATA  083H  ;DATA POINTER 0 - HIGH BYTE
0000             24   DPL1   DATA  084H  ;DATA POINTER 1 - LOW BYTE
0000             25   DPH1   DATA  085H  ;DATA POINTER 1 - HIGH BYTE
0000             26   DPS    DATA  086H  ;DATA POINTER SELECT. DPH1, DPL1 active when DPS.0=1
0000             27   PCON   DATA  087H  ;POWER CONTROL
0000             28   TCON   DATA  088H  ;TIMER CONTROL
0000             29   TMOD   DATA  089H  ;TIMER MODE
0000             30   TL0    DATA  08AH  ;TIMER 0 - LOW BYTE
0000             31   TL1    DATA  08BH  ;TIMER 1 - LOW BYTE
0000             32   TH0    DATA  08CH  ;TIMER 0 - HIGH BYTE
0000             33   TH1    DATA  08DH  ;TIMER 1 - HIGH BYTE
0000             34   P1     DATA  090H  ;PORT 1
0000             35   SCON   DATA  098H  ;SERIAL PORT CONTROL
0000             36   SBUF   DATA  099H  ;SERIAL PORT BUFFER
0000             37   P2     DATA  0A0H  ;PORT 2
0000             38   IE     DATA  0A8H  ;INTERRUPT ENABLE
0000             39   P3     DATA  0B0H  ;PORT 3
0000             40   IP     DATA  0B8H  ;INTERRUPT PRIORITY
0000             41   T2CON  DATA  0C8H  ;TIMER 2 CONTROL
0000             42   T2MOD  DATA  0C9H  ;TIMER 2 MODE
0000             43   RCAP2L DATA  0CAH  ;TIMER 2 CAPTURE REGISTER - LOW BYTE
0000             44   RCAP2H DATA  0CBH  ;TIMER 2 CAPTURE REGISTER - HIGH BYTE
0000             45   TL2    DATA  0CCH  ;TIMER 2 - LOW BYTE
0000             46   TH2    DATA  0CDH  ;TIMER 2 - HIGH BYTE
0000             47   PSW    DATA  0D0H  ;PROGRAM STATUS WORD
0000             48   ACC    DATA  0E0H  ;ACCUMULATOR
0000             49   B      DATA  0F0H  ;MULTIPLICATION REGISTER
0000             50   IT0    BIT   088H  ;TCON.0 - EXT. INTERRUPT 0 TYPE
0000             51   IE0    BIT   089H  ;TCON.1 - EXT. INTERRUPT 0 EDGE FLAG
0000             52   IT1    BIT   08AH  ;TCON.2 - EXT. INTERRUPT 1 TYPE
0000             53   IE1    BIT   08BH  ;TCON.3 - EXT. INTERRUPT 1 EDGE FLAG
0000             54   TR0    BIT   08CH  ;TCON.4 - TIMER 0 ON/OFF CONTROL
0000             55   TF0    BIT   08DH  ;TCON.5 - TIMER 0 OVERFLOW FLAG
0000             56   TR1    BIT   08EH  ;TCON.6 - TIMER 1 ON/OFF CONTROL
0000             57   TF1    BIT   08FH  ;TCON.7 - TIMER 1 OVERFLOW FLAG
0000             58   RI     BIT   098H  ;SCON.0 - RECEIVE INTERRUPT FLAG
0000             59   TI     BIT   099H  ;SCON.1 - TRANSMIT INTERRUPT FLAG
0000             60   RB8    BIT   09AH  ;SCON.2 - RECEIVE BIT 8
0000             61   TB8    BIT   09BH  ;SCON.3 - TRANSMIT BIT 8
0000             62   REN    BIT   09CH  ;SCON.4 - RECEIVE ENABLE
0000             63   SM2    BIT   09DH  ;SCON.5 - SERIAL MODE CONTROL BIT 2
0000             64   SM1    BIT   09EH  ;SCON.6 - SERIAL MODE CONTROL BIT 1
0000             65   SM0    BIT   09FH  ;SCON.7 - SERIAL MODE CONTROL BIT 0
0000             66   EX0    BIT   0A8H  ;IE.0 - EXTERNAL INTERRUPT 0 ENABLE
0000             67   ET0    BIT   0A9H  ;IE.1 - TIMER 0 INTERRUPT ENABLE
0000             68   EX1    BIT   0AAH  ;IE.2 - EXTERNAL INTERRUPT 1 ENABLE
0000             69   ET1    BIT   0ABH  ;IE.3 - TIMER 1 INTERRUPT ENABLE
0000             70   ES     BIT   0ACH  ;IE.4 - SERIAL PORT INTERRUPT ENABLE
0000             71   ET2    BIT   0ADH  ;IE.5 - TIMER 2 INTERRUPT ENABLE
0000             72   EA     BIT   0AFH  ;IE.7 - GLOBAL INTERRUPT ENABLE
0000             73   RXD    BIT   0B0H  ;P3.0 - SERIAL PORT RECEIVE INPUT
0000             74   TXD    BIT   0B1H  ;P3.1 - SERIAL PORT TRANSMIT OUTPUT
0000             75   INT0   BIT   0B2H  ;P3.2 - EXTERNAL INTERRUPT 0 INPUT
0000             76   INT1   BIT   0B3H  ;P3.3 - EXTERNAL INTERRUPT 1 INPUT
0000             77   T0     BIT   0B4H  ;P3.4 - TIMER 0 COUNT INPUT
0000             78   T1     BIT   0B5H  ;P3.5 - TIMER 1 COUNT INPUT
0000             79   WR     BIT   0B6H  ;P3.6 - WRITE CONTROL FOR EXT. MEMORY
0000             80   RD     BIT   0B7H  ;P3.7 - READ CONTROL FOR EXT. MEMORY
0000             81   PX0    BIT   0B8H  ;IP.0 - EXTERNAL INTERRUPT 0 PRIORITY
0000             82   PT0    BIT   0B9H  ;IP.1 - TIMER 0 PRIORITY
0000             83   PX1    BIT   0BAH  ;IP.2 - EXTERNAL INTERRUPT 1 PRIORITY
0000             84   PT1    BIT   0BBH  ;IP.3 - TIMER 1 PRIORITY
0000             85   PS     BIT   0BCH  ;IP.4 - SERIAL PORT PRIORITY
0000             86   PT2    BIT   0BDH  ;IP.5 - TIMER 2 PRIORITY
0000             87   CAP2   BIT   0C8H  ;T2CON.0 - CAPTURE OR RELOAD SELECT
0000             88   CNT2   BIT   0C9H  ;T2CON.1 - TIMER OR COUNTER SELECT
0000             89   TR2    BIT   0CAH  ;T2CON.2 - TIMER 2 ON/OFF CONTROL
0000             90   EXEN2  BIT   0CBH  ;T2CON.3 - TIMER 2 EXTERNAL ENABLE FLAG
0000             91   TCLK   BIT   0CCH  ;T2CON.4 - TRANSMIT CLOCK SELECT
0000             92   RCLK   BIT   0CDH  ;T2CON.5 - RECEIVE CLOCK SELECTT
0000             93   EXF2   BIT   0CEH  ;T2CON.6 - EXTERNAL TRANSITION FLAG
0000             94   TF2    BIT   0CFH  ;T2CON.7 - TIMER 2 OVERFLOW FLAG
0000             95   P      BIT   0D0H  ;PSW.0 - ACCUMULATOR PARITY FLAG
0000             96   OV     BIT   0D2H  ;PSW.2 - OVERFLOW FLAG
0000             97   RS0    BIT   0D3H  ;PSW.3 - REGISTER BANK SELECT 0
0000             98   RS1    BIT   0D4H  ;PSW.4 - REGISTER BANK SELECT 1
0000             99   F0     BIT   0D5H  ;PSW.5 - FLAG 0
0000            100   AC     BIT   0D6H  ;PSW.6 - AUXILIARY CARRY FLAG
0000            101   CY     BIT   0D7H  ;PSW.7 - CARRY FLAG
0000            102   
0000            103   ; For the altera DE2 configured with an 8051/8052 softcore processor
0000            104   ; we have the following extra registers:
0000            105   
0000            106   HEX0   DATA  091H ; Zero turns the segment on
0000            107   HEX1   DATA  092H ; 
0000            108   HEX2   DATA  093H ; 
0000            109   HEX3   DATA  094H ; 
0000            110   HEX4   DATA  08EH ;
0000            111   HEX5   DATA  08FH ;
0000            112   HEX6   DATA  096H ;
0000            113   HEX7   DATA  097H ;
0000            114   
0000            115   P0MOD  DATA  09AH ; Input/output mode bits for port 0.  '1' sets the port to output mode.
0000            116   P1MOD  DATA  09BH ; Input/output mode bits for port 1
0000            117   P2MOD  DATA  09CH ; Input/output mode bits for port 2
0000            118   P3MOD  DATA  09DH ; Input/output mode bits for port 3
0000            119   
0000            120   LEDRA  DATA  0E8H ; LEDs LEDR0 to LEDR7 (bit addressable, ex: LEDRA.1 for LEDR1)
0000            121   LEDRB  DATA  095H ; LEDs LEDR8 to LEDR15
0000            122   LEDRC  DATA  09EH ; LEDs LEDR16, LEDR15, and LEDG8
0000            123   LEDG   DATA  0F8H ; LEDs LEDG0 to LEDG7 (bit addressable, ex: LEDG.3 for LEDG3)
0000            124   SWA    DATA  0E8H ; Switches SW0 to SW7 (bit addressable, ex: SWA.1 for SW1)
0000            125   SWB    DATA  095H ; Switches SW8 to SW15
0000            126   SWC    DATA  09EH ; Switches SW16 and SW17
0000            127   KEY    DATA  0F8H ; KEY1=KEY.1, KEY2=KEY.2, KEY3=KEY.3.  KEY0 is the reset button! 
0000            128   
0000            129   LCD_CMD   DATA 0D8H ;
0000            130   LCD_DATA  DATA 0D9H ;
0000            131   LCD_MOD   DATA 0DAH ; Write 0xff to make LCD_DATA an output
0000            132   LCD_RW    BIT  0D8H ; '0' writes to LCD
0000            133   LCD_EN    BIT  0D9H ; Toggle from '1' to '0'
0000            134   LCD_RS    BIT  0DAH ; '0' for commands, '1' for data
0000            135   LCD_ON    BIT  0DBH ; Write '1' to power the LCD
0000            136   LCD_BLON  BIT  0DCH ; Write '1' to turn on back light
0000            137   
0000            138   FLASH_CMD  data 0DBH ; The control bits of the flash memory:
0000            139   ; bit 0: FL_RST_N  Set to 1 for normal operation
0000            140   ; bit 1: FL_WE_N
0000            141   ; bit 2: FL_OE_N
0000            142   ; bit 3: FL_CE_N
0000            143   FLASH_DATA data 0DCH ; 8-bit data bus of flash memory.
0000            144   FLASH_MOD  data 0DDH ; 0xff makes FLASH_DATA output.  0x00 makes FLASH_DATA input.
0000            145   FLASH_ADD0 data 0E1H ; address bits 0 to 7.
0000            146   FLASH_ADD1 data 0E2H ; address bits 8 to 15.
0000            147   FLASH_ADD2 data 0E3H ; address bits 16 to 21.
0000            148   
0000              2   
0000              3   org 0000H ; Which code memory location to start at after reset
0000 0200C9       4            ljmp pgrmstart  ; jump down to the label called "pgrmstart"
0003              5   
0003              6   ;These three values are associated with the timing of the circuit
0003              7   ;Tune them to set the "heartbeat" of the program
0003              8   ;The time between "heartbeats" is a function of product of these three
0003              9   ;But none of them can be over 255 (8 bit)
0003             10   S_TICKS EQU #100
0003             11   M_TICKS EQU #100
0003             12   L_TICKS EQU #150
0003             13   
0003             14   ; Look-up table for my student number, blank, and HELLO
0003             15   ; My student num: 48059760
0003             16   T_StuNum:
0003             17            ;       0       6         7        9    5        0        8        4    
0003 40027810    18            DB 40H, 02H, 78H, 10H, 12H, 40H, 00H, 19H
     12400019
000B             19            ; BLANK
000B 7F          20            DB 7FH
000C             21            ;   H    E        L        O
000C 8986C740    22            DB 89H, 86H, 0xC7H, 40H
0010             23            ;       C        P         N     3        1    2
0010 8686C786    24            DB 86H, 86H, 0xC7H, 86H, 86H, 86H
     8686
0016             25   
0016             26   ;This is a "function", it takes two parameters. These parameters can be accessed using %0 and %1
                 27   Display_on mac
                 28   	mov dptr, #T_StuNum ; point to student number lookup table
                 29   	mov a, %1 ; Load second input into accumulator
                 30   	movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
                 31   	mov %0, a ; Display number to given (first input) register
                 32   endmac
0016             33   
0016             34   ;This is a "function", it takes no parameters. It just displays the first 6 digits of my student number
                 35   Most_sig mac
                 36   	Display_on(r4, #00)
                 37   	Display_on(r5, #01)
                 38   	Display_on(HEX0, #02)
                 39   	Display_on(HEX1, #03)
                 40   	Display_on(HEX2, #04)
                 41   	Display_on(HEX3, #05)
                 42   	Display_on(HEX4, #06)
                 43   	Display_on(HEX5, #07)
                 44   endmac
0016             45   
0016             46   ;This is a "function", it takes no parameters. It just displays all blank
                 47   All_blnk mac
                 48   	Display_on(HEX0, #08)
                 49   	Display_on(HEX1, #08)
                 50   	Display_on(HEX2, #08)
                 51   	Display_on(HEX3, #08)
                 52   	Display_on(HEX4, #08)
                 53   	Display_on(HEX5, #08)
                 54   endmac
0016             55   
0016             56   ;This is a "function", it takes no parameters. It just displays the last 6 digits of my student number
                 57   Least_sig mac
                 58   	Display_on(HEX0, #00)
                 59   	Display_on(HEX1, #01)
                 60   	Display_on(HEX2, #02)
                 61   	Display_on(HEX3, #03)
                 62   	Display_on(HEX4, #04)
                 63   	Display_on(HEX5, #05)
                 64   endmac
0016             65   
0016             66   ;This is a "function", it takes no parameters. It just displays HELLO
                 67   Hello mac
                 68   	Display_on(HEX0, #08H)
                 69   	Display_on(HEX1, #0CH)
                 70   	Display_on(HEX2, #0BH)
                 71   	Display_on(HEX3, #0BH)
                 72   	Display_on(HEX4, #0AH)
                 73   	Display_on(HEX5, #09H)
                 74   endmac
0016             75   
0016             76   ;This is a "function", it takes no parameters. It just displays CPN312
                 77   CPN312 mac
                 78   	Display_on(HEX0, #08)
                 79   	Display_on(HEX1, #08)
                 80   	Display_on(HEX2, #08)
                 81   	Display_on(HEX3, #08)
                 82   	Display_on(HEX4, #08)
                 83   	Display_on(HEX5, #08)
                 84   endmac
0016             85   
0016             86   MODE6LONG:
0016             87            ; Mode 6 - Hello() Most_sig() CPN312()
0016             88            ; if r4 == 0, Hello
0016 BC0043      89            CJNE r4, #00, MODE6JUMP1
0019 900003      90            mov dptr, #T_StuNum ; point to student number lookup table
001C 7400        90            mov a, #00 ; Load second input into accumulator
001E 93          90            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
001F FC          90            mov r4, a ; Display number to given (first input) register
0020 900003      90            mov dptr, #T_StuNum ; point to student number lookup table
0023 7401        90            mov a, #01 ; Load second input into accumulator
0025 93          90            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0026 FD          90            mov r5, a ; Display number to given (first input) register
0027 900003      90            mov dptr, #T_StuNum ; point to student number lookup table
002A 7402        90            mov a, #02 ; Load second input into accumulator
002C 93          90            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
002D F591        90            mov HEX0, a ; Display number to given (first input) register
002F 900003      90            mov dptr, #T_StuNum ; point to student number lookup table
0032 7403        90            mov a, #03 ; Load second input into accumulator
0034 93          90            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0035 F592        90            mov HEX1, a ; Display number to given (first input) register
0037 900003      90            mov dptr, #T_StuNum ; point to student number lookup table
003A 7404        90            mov a, #04 ; Load second input into accumulator
003C 93          90            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
003D F593        90            mov HEX2, a ; Display number to given (first input) register
003F 900003      90            mov dptr, #T_StuNum ; point to student number lookup table
0042 7405        90            mov a, #05 ; Load second input into accumulator
0044 93          90            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0045 F594        90            mov HEX3, a ; Display number to given (first input) register
0047 900003      90            mov dptr, #T_StuNum ; point to student number lookup table
004A 7406        90            mov a, #06 ; Load second input into accumulator
004C 93          90            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
004D F58E        90            mov HEX4, a ; Display number to given (first input) register
004F 900003      90            mov dptr, #T_StuNum ; point to student number lookup table
0052 7407        90            mov a, #07 ; Load second input into accumulator
0054 93          90            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0055 F58F        90            mov HEX5, a ; Display number to given (first input) register
0057 7C01        91            mov r4, #01
0059 0203D9      92            ljmp ENDTIME
005C             93            MODE6JUMP1:     
005C BC0135      94            CJNE r4, #01, MODE6JUMP2
005F 900003      95            mov dptr, #T_StuNum ; point to student number lookup table
0062 7408        95            mov a, #08 ; Load second input into accumulator
0064 93          95            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0065 F591        95            mov HEX0, a ; Display number to given (first input) register
0067 900003      95            mov dptr, #T_StuNum ; point to student number lookup table
006A 7408        95            mov a, #08 ; Load second input into accumulator
006C 93          95            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
006D F592        95            mov HEX1, a ; Display number to given (first input) register
006F 900003      95            mov dptr, #T_StuNum ; point to student number lookup table
0072 7408        95            mov a, #08 ; Load second input into accumulator
0074 93          95            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0075 F593        95            mov HEX2, a ; Display number to given (first input) register
0077 900003      95            mov dptr, #T_StuNum ; point to student number lookup table
007A 7408        95            mov a, #08 ; Load second input into accumulator
007C 93          95            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
007D F594        95            mov HEX3, a ; Display number to given (first input) register
007F 900003      95            mov dptr, #T_StuNum ; point to student number lookup table
0082 7408        95            mov a, #08 ; Load second input into accumulator
0084 93          95            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0085 F58E        95            mov HEX4, a ; Display number to given (first input) register
0087 900003      95            mov dptr, #T_StuNum ; point to student number lookup table
008A 7408        95            mov a, #08 ; Load second input into accumulator
008C 93          95            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
008D F58F        95            mov HEX5, a ; Display number to given (first input) register
008F 7C02        96            mov r4, #02
0091 0203D9      97            ljmp ENDTIME
0094             98            MODE6JUMP2:
0094 900003      99            mov dptr, #T_StuNum ; point to student number lookup table
0097 7408        99            mov a, #08H ; Load second input into accumulator
0099 93          99            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
009A F591        99            mov HEX0, a ; Display number to given (first input) register
009C 900003      99            mov dptr, #T_StuNum ; point to student number lookup table
009F 740C        99            mov a, #0CH ; Load second input into accumulator
00A1 93          99            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00A2 F592        99            mov HEX1, a ; Display number to given (first input) register
00A4 900003      99            mov dptr, #T_StuNum ; point to student number lookup table
00A7 740B        99            mov a, #0BH ; Load second input into accumulator
00A9 93          99            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00AA F593        99            mov HEX2, a ; Display number to given (first input) register
00AC 900003      99            mov dptr, #T_StuNum ; point to student number lookup table
00AF 740B        99            mov a, #0BH ; Load second input into accumulator
00B1 93          99            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00B2 F594        99            mov HEX3, a ; Display number to given (first input) register
00B4 900003      99            mov dptr, #T_StuNum ; point to student number lookup table
00B7 740A        99            mov a, #0AH ; Load second input into accumulator
00B9 93          99            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00BA F58E        99            mov HEX4, a ; Display number to given (first input) register
00BC 900003      99            mov dptr, #T_StuNum ; point to student number lookup table
00BF 7409        99            mov a, #09H ; Load second input into accumulator
00C1 93          99            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00C2 F58F        99            mov HEX5, a ; Display number to given (first input) register
00C4 7C00       100            mov r4, #00
00C6 0203D9     101            ljmp ENDTIME
00C9            102   
00C9            103   ;This is a "function", it takes no parameters. It just displays the custom display for mode 7
                104   Custom_disp mac
                105   	; remove 03 and 06
                106   	Display_on(HEX0, #00)
                107   	Display_on(HEX1, #01)
                108   	Display_on(HEX2, #02)
                109   	Display_on(HEX3, #04)
                110   	Display_on(HEX4, #05)
                111   	Display_on(HEX5, #07)
                112   endmac
00C9            113   
                114   Scrll_left mac
                115   	mov b, r5 ; "temp" keep
                116   	
                117   	mov a, r4
                118   	mov r5, a
                119   	mov r4, HEX5
                120   	mov HEX5, HEX4
                121   	mov HEX4, HEX3
                122   	mov HEX3, HEX2
                123   	mov HEX2, HEX1
                124   	mov HEX1, HEX0
                125   	mov HEX0, b
                126   endmac
00C9            127   
                128   Scrll_right mac
                129   	mov b, HEX0 ; "temp" keep
                130   	
                131   	mov HEX0, HEX1
                132   	mov HEX1, HEX2
                133   	mov HEX2, HEX3
                134   	mov HEX3, HEX4
                135   	mov HEX4, HEX5
                136   	mov HEX5, r4
                137   	mov a, r5
                138   	mov r4, a
                139   	mov r5, b
                140   endmac
00C9            141   
00C9            142   ; The code under this label runs once, when the program starts
00C9            143   pgrmstart:
00C9            144            ; Turns off LEDs and stuff
00C9 75817F     145            mov SP, #0x7f
00CC 75E800     146            mov LEDRA, #0 ; Bit addressable
00CF 759500     147            mov LEDRB, #0 ; Not bit addressable
00D2            148            
00D2            149            ; Start timer
00D2 7964       150            mov r1, S_TICKS
00D4 7A64       151            mov r2, M_TICKS
00D6 7B96       152            mov r3, L_TICKS
00D8            153            
00D8            154            ; Mode 0 by default, display first 6 digits
00D8 900003     155            mov dptr, #T_StuNum ; point to student number lookup table
00DB 7400       155            mov a, #00 ; Load second input into accumulator
00DD 93         155            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00DE FC         155            mov r4, a ; Display number to given (first input) register
00DF 900003     155            mov dptr, #T_StuNum ; point to student number lookup table
00E2 7401       155            mov a, #01 ; Load second input into accumulator
00E4 93         155            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00E5 FD         155            mov r5, a ; Display number to given (first input) register
00E6 900003     155            mov dptr, #T_StuNum ; point to student number lookup table
00E9 7402       155            mov a, #02 ; Load second input into accumulator
00EB 93         155            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00EC F591       155            mov HEX0, a ; Display number to given (first input) register
00EE 900003     155            mov dptr, #T_StuNum ; point to student number lookup table
00F1 7403       155            mov a, #03 ; Load second input into accumulator
00F3 93         155            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00F4 F592       155            mov HEX1, a ; Display number to given (first input) register
00F6 900003     155            mov dptr, #T_StuNum ; point to student number lookup table
00F9 7404       155            mov a, #04 ; Load second input into accumulator
00FB 93         155            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
00FC F593       155            mov HEX2, a ; Display number to given (first input) register
00FE 900003     155            mov dptr, #T_StuNum ; point to student number lookup table
0101 7405       155            mov a, #05 ; Load second input into accumulator
0103 93         155            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0104 F594       155            mov HEX3, a ; Display number to given (first input) register
0106 900003     155            mov dptr, #T_StuNum ; point to student number lookup table
0109 7406       155            mov a, #06 ; Load second input into accumulator
010B 93         155            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
010C F58E       155            mov HEX4, a ; Display number to given (first input) register
010E 900003     155            mov dptr, #T_StuNum ; point to student number lookup table
0111 7407       155            mov a, #07 ; Load second input into accumulator
0113 93         155            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0114 F58F       155            mov HEX5, a ; Display number to given (first input) register
0116            156            
0116            157   ; The code under this label runs continuously
0116            158   loop:
0116            159            ; Latching logic
0116 20FB03     160            jb key.3, ENDLATCHtmp   ; jump if bit 3 of switch is = 1
0119 02011F     161            ljmp LATCHLOGIC
011C 02030D     162   ENDLATCHtmp: ljmp ENDLATCH       ; I have to do this weird jumping bc jb can only jump up to 127 lines
011F            163   
011F            164   ; The code under this label has to do with latching our mode, and updating the display
011F            165   ; to the "first frame" of that mode
011F            166   LATCHLOGIC:
011F            167            ; Evaluate initial display depending on mode
011F E5E8       168            mov a, SWA                                                      
0121 5407       169            ANL a, #07                              ; strip A to only the least significant 3 values by ANDing it with 00000111 (Not strictly nesc.)
0123 F8         170            mov r0, a                               ; store switch values in r0
0124            171            ; Think of this as a big Switch statement that finds what mode we are in
0124            172            ; There is a better way to do this, as a lot of the modes have the same start
0124            173            ; However, to start with this is a more clear way to see what is going on
0124 B80041     174            CJNE r0, #00, MODE1             ; jump if r0 != byte
0127            175            ; Mode 0
0127 900003     176            mov dptr, #T_StuNum ; point to student number lookup table
012A 7400       176            mov a, #00 ; Load second input into accumulator
012C 93         176            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
012D FC         176            mov r4, a ; Display number to given (first input) register
012E 900003     176            mov dptr, #T_StuNum ; point to student number lookup table
0131 7401       176            mov a, #01 ; Load second input into accumulator
0133 93         176            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0134 FD         176            mov r5, a ; Display number to given (first input) register
0135 900003     176            mov dptr, #T_StuNum ; point to student number lookup table
0138 7402       176            mov a, #02 ; Load second input into accumulator
013A 93         176            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
013B F591       176            mov HEX0, a ; Display number to given (first input) register
013D 900003     176            mov dptr, #T_StuNum ; point to student number lookup table
0140 7403       176            mov a, #03 ; Load second input into accumulator
0142 93         176            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0143 F592       176            mov HEX1, a ; Display number to given (first input) register
0145 900003     176            mov dptr, #T_StuNum ; point to student number lookup table
0148 7404       176            mov a, #04 ; Load second input into accumulator
014A 93         176            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
014B F593       176            mov HEX2, a ; Display number to given (first input) register
014D 900003     176            mov dptr, #T_StuNum ; point to student number lookup table
0150 7405       176            mov a, #05 ; Load second input into accumulator
0152 93         176            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0153 F594       176            mov HEX3, a ; Display number to given (first input) register
0155 900003     176            mov dptr, #T_StuNum ; point to student number lookup table
0158 7406       176            mov a, #06 ; Load second input into accumulator
015A 93         176            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
015B F58E       176            mov HEX4, a ; Display number to given (first input) register
015D 900003     176            mov dptr, #T_StuNum ; point to student number lookup table
0160 7407       176            mov a, #07 ; Load second input into accumulator
0162 93         176            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0163 F58F       176            mov HEX5, a ; Display number to given (first input) register ; display first 6 digits
0165            177            
0165 02030D     178            ljmp ENDLATCH   
0168 B80143     179   MODE1:   CJNE r0, #01, MODE2             ; jump if A != byte 
016B            180            ; Mode 1
016B 900003     181            mov dptr, #T_StuNum ; point to student number lookup table
016E 7408       181            mov a, #08 ; Load second input into accumulator
0170 93         181            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0171 F591       181            mov HEX0, a ; Display number to given (first input) register
0173 900003     181            mov dptr, #T_StuNum ; point to student number lookup table
0176 7408       181            mov a, #08 ; Load second input into accumulator
0178 93         181            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0179 F592       181            mov HEX1, a ; Display number to given (first input) register
017B 900003     181            mov dptr, #T_StuNum ; point to student number lookup table
017E 7408       181            mov a, #08 ; Load second input into accumulator
0180 93         181            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0181 F593       181            mov HEX2, a ; Display number to given (first input) register
0183 900003     181            mov dptr, #T_StuNum ; point to student number lookup table
0186 7408       181            mov a, #08 ; Load second input into accumulator
0188 93         181            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0189 F594       181            mov HEX3, a ; Display number to given (first input) register
018B 900003     181            mov dptr, #T_StuNum ; point to student number lookup table
018E 7408       181            mov a, #08 ; Load second input into accumulator
0190 93         181            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0191 F58E       181            mov HEX4, a ; Display number to given (first input) register
0193 900003     181            mov dptr, #T_StuNum ; point to student number lookup table
0196 7408       181            mov a, #08 ; Load second input into accumulator
0198 93         181            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0199 F58F       181            mov HEX5, a ; Display number to given (first input) register
019B 900003     182            mov dptr, #T_StuNum ; point to student number lookup table
019E 7400       182            mov a, #00 ; Load second input into accumulator
01A0 93         182            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01A1 F591       182            mov HEX0, a ; Display number to given (first input) register
01A3 900003     183            mov dptr, #T_StuNum ; point to student number lookup table
01A6 7401       183            mov a, #01 ; Load second input into accumulator
01A8 93         183            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01A9 F592       183            mov HEX1, a ; Display number to given (first input) register
01AB            184                    
01AB 02030D     185            ljmp ENDLATCH
01AE B80241     186   MODE2:   CJNE r0, #02, MODE3             ; jump if A != byte 
01B1            187            ; Mode 2
01B1 900003     188            mov dptr, #T_StuNum ; point to student number lookup table
01B4 7400       188            mov a, #00 ; Load second input into accumulator
01B6 93         188            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01B7 FC         188            mov r4, a ; Display number to given (first input) register
01B8 900003     188            mov dptr, #T_StuNum ; point to student number lookup table
01BB 7401       188            mov a, #01 ; Load second input into accumulator
01BD 93         188            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01BE FD         188            mov r5, a ; Display number to given (first input) register
01BF 900003     188            mov dptr, #T_StuNum ; point to student number lookup table
01C2 7402       188            mov a, #02 ; Load second input into accumulator
01C4 93         188            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01C5 F591       188            mov HEX0, a ; Display number to given (first input) register
01C7 900003     188            mov dptr, #T_StuNum ; point to student number lookup table
01CA 7403       188            mov a, #03 ; Load second input into accumulator
01CC 93         188            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01CD F592       188            mov HEX1, a ; Display number to given (first input) register
01CF 900003     188            mov dptr, #T_StuNum ; point to student number lookup table
01D2 7404       188            mov a, #04 ; Load second input into accumulator
01D4 93         188            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01D5 F593       188            mov HEX2, a ; Display number to given (first input) register
01D7 900003     188            mov dptr, #T_StuNum ; point to student number lookup table
01DA 7405       188            mov a, #05 ; Load second input into accumulator
01DC 93         188            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01DD F594       188            mov HEX3, a ; Display number to given (first input) register
01DF 900003     188            mov dptr, #T_StuNum ; point to student number lookup table
01E2 7406       188            mov a, #06 ; Load second input into accumulator
01E4 93         188            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01E5 F58E       188            mov HEX4, a ; Display number to given (first input) register
01E7 900003     188            mov dptr, #T_StuNum ; point to student number lookup table
01EA 7407       188            mov a, #07 ; Load second input into accumulator
01EC 93         188            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01ED F58F       188            mov HEX5, a ; Display number to given (first input) register ; display first 6 digits
01EF 02030D     189            ljmp ENDLATCH
01F2 B80341     190   MODE3:   CJNE r0, #03, MODE4             ; jump if A != byte 
01F5            191            ; Mode 3
01F5 900003     192            mov dptr, #T_StuNum ; point to student number lookup table
01F8 7400       192            mov a, #00 ; Load second input into accumulator
01FA 93         192            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
01FB FC         192            mov r4, a ; Display number to given (first input) register
01FC 900003     192            mov dptr, #T_StuNum ; point to student number lookup table
01FF 7401       192            mov a, #01 ; Load second input into accumulator
0201 93         192            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0202 FD         192            mov r5, a ; Display number to given (first input) register
0203 900003     192            mov dptr, #T_StuNum ; point to student number lookup table
0206 7402       192            mov a, #02 ; Load second input into accumulator
0208 93         192            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0209 F591       192            mov HEX0, a ; Display number to given (first input) register
020B 900003     192            mov dptr, #T_StuNum ; point to student number lookup table
020E 7403       192            mov a, #03 ; Load second input into accumulator
0210 93         192            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0211 F592       192            mov HEX1, a ; Display number to given (first input) register
0213 900003     192            mov dptr, #T_StuNum ; point to student number lookup table
0216 7404       192            mov a, #04 ; Load second input into accumulator
0218 93         192            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0219 F593       192            mov HEX2, a ; Display number to given (first input) register
021B 900003     192            mov dptr, #T_StuNum ; point to student number lookup table
021E 7405       192            mov a, #05 ; Load second input into accumulator
0220 93         192            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0221 F594       192            mov HEX3, a ; Display number to given (first input) register
0223 900003     192            mov dptr, #T_StuNum ; point to student number lookup table
0226 7406       192            mov a, #06 ; Load second input into accumulator
0228 93         192            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0229 F58E       192            mov HEX4, a ; Display number to given (first input) register
022B 900003     192            mov dptr, #T_StuNum ; point to student number lookup table
022E 7407       192            mov a, #07 ; Load second input into accumulator
0230 93         192            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0231 F58F       192            mov HEX5, a ; Display number to given (first input) register ; display first 6 digits
0233 02030D     193            ljmp ENDLATCH
0236 B80435     194   MODE4:   CJNE r0, #04, MODE5             ; jump if A != byte 
0239            195            ; Mode 4
0239 900003     196            mov dptr, #T_StuNum ; point to student number lookup table
023C 7400       196            mov a, #00 ; Load second input into accumulator
023E 93         196            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
023F F591       196            mov HEX0, a ; Display number to given (first input) register
0241 900003     196            mov dptr, #T_StuNum ; point to student number lookup table
0244 7401       196            mov a, #01 ; Load second input into accumulator
0246 93         196            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0247 F592       196            mov HEX1, a ; Display number to given (first input) register
0249 900003     196            mov dptr, #T_StuNum ; point to student number lookup table
024C 7402       196            mov a, #02 ; Load second input into accumulator
024E 93         196            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
024F F593       196            mov HEX2, a ; Display number to given (first input) register
0251 900003     196            mov dptr, #T_StuNum ; point to student number lookup table
0254 7403       196            mov a, #03 ; Load second input into accumulator
0256 93         196            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0257 F594       196            mov HEX3, a ; Display number to given (first input) register
0259 900003     196            mov dptr, #T_StuNum ; point to student number lookup table
025C 7404       196            mov a, #04 ; Load second input into accumulator
025E 93         196            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
025F F58E       196            mov HEX4, a ; Display number to given (first input) register
0261 900003     196            mov dptr, #T_StuNum ; point to student number lookup table
0264 7405       196            mov a, #05 ; Load second input into accumulator
0266 93         196            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0267 F58F       196            mov HEX5, a ; Display number to given (first input) register ; display last 6 digits
0269 7C00       197            mov r4, #00
026B 02030D     198            ljmp ENDLATCH
026E B80533     199   MODE5:   CJNE r0, #05, MODE6             ; jump if A != byte 
0271            200            ; Mode 5
0271 900003     201            mov dptr, #T_StuNum ; point to student number lookup table
0274 7408       201            mov a, #08 ; Load second input into accumulator
0276 93         201            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0277 F591       201            mov HEX0, a ; Display number to given (first input) register
0279 900003     201            mov dptr, #T_StuNum ; point to student number lookup table
027C 7408       201            mov a, #08 ; Load second input into accumulator
027E 93         201            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
027F F592       201            mov HEX1, a ; Display number to given (first input) register
0281 900003     201            mov dptr, #T_StuNum ; point to student number lookup table
0284 7408       201            mov a, #08 ; Load second input into accumulator
0286 93         201            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0287 F593       201            mov HEX2, a ; Display number to given (first input) register
0289 900003     201            mov dptr, #T_StuNum ; point to student number lookup table
028C 7408       201            mov a, #08 ; Load second input into accumulator
028E 93         201            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
028F F594       201            mov HEX3, a ; Display number to given (first input) register
0291 900003     201            mov dptr, #T_StuNum ; point to student number lookup table
0294 7408       201            mov a, #08 ; Load second input into accumulator
0296 93         201            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0297 F58E       201            mov HEX4, a ; Display number to given (first input) register
0299 900003     201            mov dptr, #T_StuNum ; point to student number lookup table
029C 7408       201            mov a, #08 ; Load second input into accumulator
029E 93         201            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
029F F58F       201            mov HEX5, a ; Display number to given (first input) register
02A1            202            
02A1 02030D     203            ljmp ENDLATCH
02A4 B80633     204   MODE6:   CJNE r0, #06, MODE7             ; jump if A != byte 
02A7            205            ; Mode 6
02A7 900003     206            mov dptr, #T_StuNum ; point to student number lookup table
02AA 7408       206            mov a, #08H ; Load second input into accumulator
02AC 93         206            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
02AD F591       206            mov HEX0, a ; Display number to given (first input) register
02AF 900003     206            mov dptr, #T_StuNum ; point to student number lookup table
02B2 740C       206            mov a, #0CH ; Load second input into accumulator
02B4 93         206            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
02B5 F592       206            mov HEX1, a ; Display number to given (first input) register
02B7 900003     206            mov dptr, #T_StuNum ; point to student number lookup table
02BA 740B       206            mov a, #0BH ; Load second input into accumulator
02BC 93         206            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
02BD F593       206            mov HEX2, a ; Display number to given (first input) register
02BF 900003     206            mov dptr, #T_StuNum ; point to student number lookup table
02C2 740B       206            mov a, #0BH ; Load second input into accumulator
02C4 93         206            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
02C5 F594       206            mov HEX3, a ; Display number to given (first input) register
02C7 900003     206            mov dptr, #T_StuNum ; point to student number lookup table
02CA 740A       206            mov a, #0AH ; Load second input into accumulator
02CC 93         206            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
02CD F58E       206            mov HEX4, a ; Display number to given (first input) register
02CF 900003     206            mov dptr, #T_StuNum ; point to student number lookup table
02D2 7409       206            mov a, #09H ; Load second input into accumulator
02D4 93         206            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
02D5 F58F       206            mov HEX5, a ; Display number to given (first input) register
02D7            207            
02D7 02030D     208            ljmp ENDLATCH
02DA            209   MODE7:   ; this should be the "else" case
02DA            210            ; Mode 7
02DA            211            ; remove 03 and 06
02DA 900003     211            mov dptr, #T_StuNum ; point to student number lookup table
02DD 7400       211            mov a, #00 ; Load second input into accumulator
02DF 93         211            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
02E0 F591       211            mov HEX0, a ; Display number to given (first input) register
02E2 900003     211            mov dptr, #T_StuNum ; point to student number lookup table
02E5 7401       211            mov a, #01 ; Load second input into accumulator
02E7 93         211            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
02E8 F592       211            mov HEX1, a ; Display number to given (first input) register
02EA 900003     211            mov dptr, #T_StuNum ; point to student number lookup table
02ED 7402       211            mov a, #02 ; Load second input into accumulator
02EF 93         211            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
02F0 F593       211            mov HEX2, a ; Display number to given (first input) register
02F2 900003     211            mov dptr, #T_StuNum ; point to student number lookup table
02F5 7404       211            mov a, #04 ; Load second input into accumulator
02F7 93         211            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
02F8 F594       211            mov HEX3, a ; Display number to given (first input) register
02FA 900003     211            mov dptr, #T_StuNum ; point to student number lookup table
02FD 7405       211            mov a, #05 ; Load second input into accumulator
02FF 93         211            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0300 F58E       211            mov HEX4, a ; Display number to given (first input) register
0302 900003     211            mov dptr, #T_StuNum ; point to student number lookup table
0305 7407       211            mov a, #07 ; Load second input into accumulator
0307 93         211            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0308 F58F       211            mov HEX5, a ; Display number to given (first input) register
030A            212            
030A 02030D     213            ljmp ENDLATCH   
030D            214   ENDLATCH: 
030D            215   
030D            216   ; The code under this label has to do with timekeeping
030D            217   TIMELOGIC:       
030D            218            ; Timing logic
030D D90D       219            djnz r1, ENDTICK
030F 7964       220            mov r1, S_TICKS         ; if we got here, that means r1 is zero
0311 DA09       221            djnz r2, ENDTICK
0313 7A64       222            mov r2, M_TICKS         ; if we got here, that means r2 is zero
0315 DB05       223            djnz r3, ENDTICK
0317 7B96       224            mov r3, L_TICKS         ; if we got here, that means r3 is zero
0319 02031F     225            ljmp HEARTBEAT
031C            226            
031C            227            ENDTICK:
031C 0203D9     228            ljmp ENDTIME
031F            229            
031F            230   
031F            231            ; these lines execute once a "heartbeat"
031F            232   HEARTBEAT:
031F B2E8       233            cpl LEDRA.0             ;flip LED to visualize heartbeat
0321            234            
0321            235            ; Think of this as a big Switch statement that finds what mode we are in
0321            236            ; Modes that have time-dependant behavior: 2, 3, 4, 5, 6
0321 B8021B     237            CJNE r0, #02, MODE3T            ; jump if r0 != byte
0324            238            ; Mode 2
0324 8DF0       239            mov b, r5 ; "temp" keep
0326            239            
0326 EC         239            mov a, r4
0327 FD         239            mov r5, a
0328 AC8F       239            mov r4, HEX5
032A 858E8F     239            mov HEX5, HEX4
032D 85948E     239            mov HEX4, HEX3
0330 859394     239            mov HEX3, HEX2
0333 859293     239            mov HEX2, HEX1
0336 859192     239            mov HEX1, HEX0
0339 85F091     239            mov HEX0, b
033C 0203D9     240            ljmp ENDTIME    
033F B8031B     241   MODE3T:  CJNE r0, #03, MODE4T            ; jump if r0 != byte 
0342            242            ; Mode 3
0342 8591F0     243            mov b, HEX0 ; "temp" keep
0345            243            
0345 859291     243            mov HEX0, HEX1
0348 859392     243            mov HEX1, HEX2
034B 859493     243            mov HEX2, HEX3
034E 858E94     243            mov HEX3, HEX4
0351 858F8E     243            mov HEX4, HEX5
0354 8C8F       243            mov HEX5, r4
0356 ED         243            mov a, r5
0357 FC         243            mov r4, a
0358 ADF0       243            mov r5, b
035A            244                    
035A 0203D9     245            ljmp ENDTIME
035D B8046D     246   MODE4T:  CJNE r0, #04, MODE5T            ; jump if A != byte 
0360            247            ; Mode 4 - Flash
0360            248            ; if r4 == 0, blank
0360 BC0035     249            CJNE r4, #00, FLASHJUMP
0363 900003     250            mov dptr, #T_StuNum ; point to student number lookup table
0366 7408       250            mov a, #08 ; Load second input into accumulator
0368 93         250            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0369 F591       250            mov HEX0, a ; Display number to given (first input) register
036B 900003     250            mov dptr, #T_StuNum ; point to student number lookup table
036E 7408       250            mov a, #08 ; Load second input into accumulator
0370 93         250            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0371 F592       250            mov HEX1, a ; Display number to given (first input) register
0373 900003     250            mov dptr, #T_StuNum ; point to student number lookup table
0376 7408       250            mov a, #08 ; Load second input into accumulator
0378 93         250            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0379 F593       250            mov HEX2, a ; Display number to given (first input) register
037B 900003     250            mov dptr, #T_StuNum ; point to student number lookup table
037E 7408       250            mov a, #08 ; Load second input into accumulator
0380 93         250            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0381 F594       250            mov HEX3, a ; Display number to given (first input) register
0383 900003     250            mov dptr, #T_StuNum ; point to student number lookup table
0386 7408       250            mov a, #08 ; Load second input into accumulator
0388 93         250            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0389 F58E       250            mov HEX4, a ; Display number to given (first input) register
038B 900003     250            mov dptr, #T_StuNum ; point to student number lookup table
038E 7408       250            mov a, #08 ; Load second input into accumulator
0390 93         250            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
0391 F58F       250            mov HEX5, a ; Display number to given (first input) register
0393 7C01       251            mov r4, #01
0395 0203D9     252            ljmp ENDTIME
0398            253            FLASHJUMP:      
0398 900003     254            mov dptr, #T_StuNum ; point to student number lookup table
039B 7400       254            mov a, #00 ; Load second input into accumulator
039D 93         254            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
039E F591       254            mov HEX0, a ; Display number to given (first input) register
03A0 900003     254            mov dptr, #T_StuNum ; point to student number lookup table
03A3 7401       254            mov a, #01 ; Load second input into accumulator
03A5 93         254            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
03A6 F592       254            mov HEX1, a ; Display number to given (first input) register
03A8 900003     254            mov dptr, #T_StuNum ; point to student number lookup table
03AB 7402       254            mov a, #02 ; Load second input into accumulator
03AD 93         254            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
03AE F593       254            mov HEX2, a ; Display number to given (first input) register
03B0 900003     254            mov dptr, #T_StuNum ; point to student number lookup table
03B3 7403       254            mov a, #03 ; Load second input into accumulator
03B5 93         254            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
03B6 F594       254            mov HEX3, a ; Display number to given (first input) register
03B8 900003     254            mov dptr, #T_StuNum ; point to student number lookup table
03BB 7404       254            mov a, #04 ; Load second input into accumulator
03BD 93         254            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
03BE F58E       254            mov HEX4, a ; Display number to given (first input) register
03C0 900003     254            mov dptr, #T_StuNum ; point to student number lookup table
03C3 7405       254            mov a, #05 ; Load second input into accumulator
03C5 93         254            movc a, @dptr+a ; Read from table with the input offset. movc means reading from the code dataspace, and the @ is a dereference thing bc its a pointer
03C6 F58F       254            mov HEX5, a ; Display number to given (first input) register
03C8 7C00       255            mov r4, #00
03CA 0203D9     256            ljmp ENDTIME
03CD B80503     257   MODE5T:  CJNE r0, #05, MODE6T            ; jump if A != byte 
03D0            258            ; Mode 5 - One by one
03D0            259   
03D0 0203D9     260            ljmp ENDTIME
03D3 B80603     261   MODE6T:  CJNE r0, #06, ENDTIME           ; jump if A != byte 
03D6            262            ; Couldn't fit it in so had to do a scuffed long jump away then back
03D6 020016     263            ljmp MODE6LONG
03D9            264   ENDTIME:
03D9            265   
03D9 020116     266            ljmp loop ; Go back up to loop to keep repeating forever
03DC            267   END
